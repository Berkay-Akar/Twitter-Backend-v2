
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type userPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "user"
  objects: {
    tweets: tweetPayload<ExtArgs>[]
    likedTweets: tweet_likesPayload<ExtArgs>[]
    retweetedTweets: tweet_retweetPayload<ExtArgs>[]
    followers: FollowsPayload<ExtArgs>[]
    following: FollowsPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    username: string
    email: string
    password: string
    tweet_count: number
    following_count: number
    followers_count: number
    birthday: Date | null
    description: string | null
    profile_photo: string | null
    created_at: Date
    updated_at: Date
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model user
 * 
 */
export type user = runtime.Types.DefaultSelection<userPayload>
export type tweetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "tweet"
  objects: {
    user: userPayload<ExtArgs> | null
    likes: tweet_likesPayload<ExtArgs>[]
    retweets: tweet_retweetPayload<ExtArgs>[]
    originalTweet: tweetPayload<ExtArgs> | null
    replies: tweetPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    content: string
    like_count: number
    retweet_count: number
    comments_count: number
    image: string | null
    created_at: Date
    updated_at: Date
    user_id: number
    originalTweetId: number | null
  }, ExtArgs["result"]["tweet"]>
  composites: {}
}

/**
 * Model tweet
 * 
 */
export type tweet = runtime.Types.DefaultSelection<tweetPayload>
export type tweet_likesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "tweet_likes"
  objects: {
    user: userPayload<ExtArgs> | null
    tweet: tweetPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    user_id: number
    tweet_id: number
    created_at: Date
  }, ExtArgs["result"]["tweet_likes"]>
  composites: {}
}

/**
 * Model tweet_likes
 * 
 */
export type tweet_likes = runtime.Types.DefaultSelection<tweet_likesPayload>
export type tweet_retweetPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "tweet_retweet"
  objects: {
    tweet: tweetPayload<ExtArgs> | null
    user: userPayload<ExtArgs> | null
  }
  scalars: $Extensions.GetResult<{
    id: number
    tweet_id: number
    user_id: number
    created_at: Date
  }, ExtArgs["result"]["tweet_retweet"]>
  composites: {}
}

/**
 * Model tweet_retweet
 * 
 */
export type tweet_retweet = runtime.Types.DefaultSelection<tweet_retweetPayload>
export type FollowsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Follows"
  objects: {
    follower: userPayload<ExtArgs>
    following: userPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    followerId: number
    followingId: number
  }, ExtArgs["result"]["follows"]>
  composites: {}
}

/**
 * Model Follows
 * 
 */
export type Follows = runtime.Types.DefaultSelection<FollowsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.tweet`: Exposes CRUD operations for the **tweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweets
    * const tweets = await prisma.tweet.findMany()
    * ```
    */
  get tweet(): Prisma.tweetDelegate<ExtArgs>;

  /**
   * `prisma.tweet_likes`: Exposes CRUD operations for the **tweet_likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweet_likes
    * const tweet_likes = await prisma.tweet_likes.findMany()
    * ```
    */
  get tweet_likes(): Prisma.tweet_likesDelegate<ExtArgs>;

  /**
   * `prisma.tweet_retweet`: Exposes CRUD operations for the **tweet_retweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweet_retweets
    * const tweet_retweets = await prisma.tweet_retweet.findMany()
    * ```
    */
  get tweet_retweet(): Prisma.tweet_retweetDelegate<ExtArgs>;

  /**
   * `prisma.follows`: Exposes CRUD operations for the **Follows** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Follows
    * const follows = await prisma.follows.findMany()
    * ```
    */
  get follows(): Prisma.FollowsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 5.0.0
   * Query Engine version: 6b0aef69b7cdfc787f822ecd7cdc76d5f1991584
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    tweet: 'tweet',
    tweet_likes: 'tweet_likes',
    tweet_retweet: 'tweet_retweet',
    Follows: 'Follows'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'tweet' | 'tweet_likes' | 'tweet_retweet' | 'follows'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      user: {
        payload: userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      tweet: {
        payload: tweetPayload<ExtArgs>
        fields: Prisma.tweetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tweetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tweetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          findFirst: {
            args: Prisma.tweetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tweetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          findMany: {
            args: Prisma.tweetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>[]
          }
          create: {
            args: Prisma.tweetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          createMany: {
            args: Prisma.tweetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tweetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          update: {
            args: Prisma.tweetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          deleteMany: {
            args: Prisma.tweetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tweetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tweetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweetPayload>
          }
          aggregate: {
            args: Prisma.TweetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTweet>
          }
          groupBy: {
            args: Prisma.tweetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TweetGroupByOutputType>[]
          }
          count: {
            args: Prisma.tweetCountArgs<ExtArgs>,
            result: $Utils.Optional<TweetCountAggregateOutputType> | number
          }
        }
      }
      tweet_likes: {
        payload: tweet_likesPayload<ExtArgs>
        fields: Prisma.tweet_likesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tweet_likesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tweet_likesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          findFirst: {
            args: Prisma.tweet_likesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tweet_likesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          findMany: {
            args: Prisma.tweet_likesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>[]
          }
          create: {
            args: Prisma.tweet_likesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          createMany: {
            args: Prisma.tweet_likesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tweet_likesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          update: {
            args: Prisma.tweet_likesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          deleteMany: {
            args: Prisma.tweet_likesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tweet_likesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tweet_likesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_likesPayload>
          }
          aggregate: {
            args: Prisma.Tweet_likesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTweet_likes>
          }
          groupBy: {
            args: Prisma.tweet_likesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Tweet_likesGroupByOutputType>[]
          }
          count: {
            args: Prisma.tweet_likesCountArgs<ExtArgs>,
            result: $Utils.Optional<Tweet_likesCountAggregateOutputType> | number
          }
        }
      }
      tweet_retweet: {
        payload: tweet_retweetPayload<ExtArgs>
        fields: Prisma.tweet_retweetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tweet_retweetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tweet_retweetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          findFirst: {
            args: Prisma.tweet_retweetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tweet_retweetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          findMany: {
            args: Prisma.tweet_retweetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>[]
          }
          create: {
            args: Prisma.tweet_retweetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          createMany: {
            args: Prisma.tweet_retweetCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.tweet_retweetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          update: {
            args: Prisma.tweet_retweetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          deleteMany: {
            args: Prisma.tweet_retweetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.tweet_retweetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.tweet_retweetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<tweet_retweetPayload>
          }
          aggregate: {
            args: Prisma.Tweet_retweetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTweet_retweet>
          }
          groupBy: {
            args: Prisma.tweet_retweetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Tweet_retweetGroupByOutputType>[]
          }
          count: {
            args: Prisma.tweet_retweetCountArgs<ExtArgs>,
            result: $Utils.Optional<Tweet_retweetCountAggregateOutputType> | number
          }
        }
      }
      Follows: {
        payload: FollowsPayload<ExtArgs>
        fields: Prisma.FollowsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          findFirst: {
            args: Prisma.FollowsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          findMany: {
            args: Prisma.FollowsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>[]
          }
          create: {
            args: Prisma.FollowsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          createMany: {
            args: Prisma.FollowsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FollowsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          update: {
            args: Prisma.FollowsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          deleteMany: {
            args: Prisma.FollowsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FollowsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FollowsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<FollowsPayload>
          }
          aggregate: {
            args: Prisma.FollowsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFollows>
          }
          groupBy: {
            args: Prisma.FollowsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FollowsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowsCountArgs<ExtArgs>,
            result: $Utils.Optional<FollowsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    tweets: number
    likedTweets: number
    retweetedTweets: number
    followers: number
    following: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tweets?: boolean | UserCountOutputTypeCountTweetsArgs
    likedTweets?: boolean | UserCountOutputTypeCountLikedTweetsArgs
    retweetedTweets?: boolean | UserCountOutputTypeCountRetweetedTweetsArgs
    followers?: boolean | UserCountOutputTypeCountFollowersArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweetWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedTweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_likesWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRetweetedTweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_retweetWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowsWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowsWhereInput
  }



  /**
   * Count Type TweetCountOutputType
   */


  export type TweetCountOutputType = {
    likes: number
    retweets: number
    replies: number
  }

  export type TweetCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    likes?: boolean | TweetCountOutputTypeCountLikesArgs
    retweets?: boolean | TweetCountOutputTypeCountRetweetsArgs
    replies?: boolean | TweetCountOutputTypeCountRepliesArgs
  }

  // Custom InputTypes

  /**
   * TweetCountOutputType without action
   */
  export type TweetCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TweetCountOutputType
     */
    select?: TweetCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TweetCountOutputType without action
   */
  export type TweetCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_likesWhereInput
  }


  /**
   * TweetCountOutputType without action
   */
  export type TweetCountOutputTypeCountRetweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_retweetWhereInput
  }


  /**
   * TweetCountOutputType without action
   */
  export type TweetCountOutputTypeCountRepliesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweetWhereInput
  }



  /**
   * Models
   */

  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    tweet_count: number | null
    following_count: number | null
    followers_count: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    tweet_count: number | null
    following_count: number | null
    followers_count: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    tweet_count: number | null
    following_count: number | null
    followers_count: number | null
    birthday: Date | null
    description: string | null
    profile_photo: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    email: string | null
    password: string | null
    tweet_count: number | null
    following_count: number | null
    followers_count: number | null
    birthday: Date | null
    description: string | null
    profile_photo: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    email: number
    password: number
    tweet_count: number
    following_count: number
    followers_count: number
    birthday: number
    description: number
    profile_photo: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    tweet_count?: true
    following_count?: true
    followers_count?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    tweet_count?: true
    following_count?: true
    followers_count?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    tweet_count?: true
    following_count?: true
    followers_count?: true
    birthday?: true
    description?: true
    profile_photo?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    tweet_count?: true
    following_count?: true
    followers_count?: true
    birthday?: true
    description?: true
    profile_photo?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    email?: true
    password?: true
    tweet_count?: true
    following_count?: true
    followers_count?: true
    birthday?: true
    description?: true
    profile_photo?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    username: string
    email: string
    password: string
    tweet_count: number
    following_count: number
    followers_count: number
    birthday: Date | null
    description: string | null
    profile_photo: string | null
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    tweet_count?: boolean
    following_count?: boolean
    followers_count?: boolean
    birthday?: boolean
    description?: boolean
    profile_photo?: boolean
    created_at?: boolean
    updated_at?: boolean
    tweets?: boolean | user$tweetsArgs<ExtArgs>
    likedTweets?: boolean | user$likedTweetsArgs<ExtArgs>
    retweetedTweets?: boolean | user$retweetedTweetsArgs<ExtArgs>
    followers?: boolean | user$followersArgs<ExtArgs>
    following?: boolean | user$followingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    tweet_count?: boolean
    following_count?: boolean
    followers_count?: boolean
    birthday?: boolean
    description?: boolean
    profile_photo?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tweets?: boolean | user$tweetsArgs<ExtArgs>
    likedTweets?: boolean | user$likedTweetsArgs<ExtArgs>
    retweetedTweets?: boolean | user$retweetedTweetsArgs<ExtArgs>
    followers?: boolean | user$followersArgs<ExtArgs>
    following?: boolean | user$followingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type userGetPayload<S extends boolean | null | undefined | userArgs> = $Types.GetResult<userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<userPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userCreateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userDeleteArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userUpsertArgs<ExtArgs>>
    ): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tweets<T extends user$tweetsArgs<ExtArgs> = {}>(args?: Subset<T, user$tweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findMany'>| Null>;

    likedTweets<T extends user$likedTweetsArgs<ExtArgs> = {}>(args?: Subset<T, user$likedTweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findMany'>| Null>;

    retweetedTweets<T extends user$retweetedTweetsArgs<ExtArgs> = {}>(args?: Subset<T, user$retweetedTweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findMany'>| Null>;

    followers<T extends user$followersArgs<ExtArgs> = {}>(args?: Subset<T, user$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findMany'>| Null>;

    following<T extends user$followingArgs<ExtArgs> = {}>(args?: Subset<T, user$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly name: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly tweet_count: FieldRef<"user", 'Int'>
    readonly following_count: FieldRef<"user", 'Int'>
    readonly followers_count: FieldRef<"user", 'Int'>
    readonly birthday: FieldRef<"user", 'DateTime'>
    readonly description: FieldRef<"user", 'String'>
    readonly profile_photo: FieldRef<"user", 'String'>
    readonly created_at: FieldRef<"user", 'DateTime'>
    readonly updated_at: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }


  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }


  /**
   * user.tweets
   */
  export type user$tweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    where?: tweetWhereInput
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    cursor?: tweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TweetScalarFieldEnum | TweetScalarFieldEnum[]
  }


  /**
   * user.likedTweets
   */
  export type user$likedTweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    where?: tweet_likesWhereInput
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    cursor?: tweet_likesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Tweet_likesScalarFieldEnum | Tweet_likesScalarFieldEnum[]
  }


  /**
   * user.retweetedTweets
   */
  export type user$retweetedTweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    where?: tweet_retweetWhereInput
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    cursor?: tweet_retweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Tweet_retweetScalarFieldEnum | Tweet_retweetScalarFieldEnum[]
  }


  /**
   * user.followers
   */
  export type user$followersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    where?: FollowsWhereInput
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    cursor?: FollowsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowsScalarFieldEnum | FollowsScalarFieldEnum[]
  }


  /**
   * user.following
   */
  export type user$followingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    where?: FollowsWhereInput
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    cursor?: FollowsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowsScalarFieldEnum | FollowsScalarFieldEnum[]
  }


  /**
   * user without action
   */
  export type userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
  }



  /**
   * Model tweet
   */


  export type AggregateTweet = {
    _count: TweetCountAggregateOutputType | null
    _avg: TweetAvgAggregateOutputType | null
    _sum: TweetSumAggregateOutputType | null
    _min: TweetMinAggregateOutputType | null
    _max: TweetMaxAggregateOutputType | null
  }

  export type TweetAvgAggregateOutputType = {
    id: number | null
    like_count: number | null
    retweet_count: number | null
    comments_count: number | null
    user_id: number | null
    originalTweetId: number | null
  }

  export type TweetSumAggregateOutputType = {
    id: number | null
    like_count: number | null
    retweet_count: number | null
    comments_count: number | null
    user_id: number | null
    originalTweetId: number | null
  }

  export type TweetMinAggregateOutputType = {
    id: number | null
    content: string | null
    like_count: number | null
    retweet_count: number | null
    comments_count: number | null
    image: string | null
    created_at: Date | null
    updated_at: Date | null
    user_id: number | null
    originalTweetId: number | null
  }

  export type TweetMaxAggregateOutputType = {
    id: number | null
    content: string | null
    like_count: number | null
    retweet_count: number | null
    comments_count: number | null
    image: string | null
    created_at: Date | null
    updated_at: Date | null
    user_id: number | null
    originalTweetId: number | null
  }

  export type TweetCountAggregateOutputType = {
    id: number
    content: number
    like_count: number
    retweet_count: number
    comments_count: number
    image: number
    created_at: number
    updated_at: number
    user_id: number
    originalTweetId: number
    _all: number
  }


  export type TweetAvgAggregateInputType = {
    id?: true
    like_count?: true
    retweet_count?: true
    comments_count?: true
    user_id?: true
    originalTweetId?: true
  }

  export type TweetSumAggregateInputType = {
    id?: true
    like_count?: true
    retweet_count?: true
    comments_count?: true
    user_id?: true
    originalTweetId?: true
  }

  export type TweetMinAggregateInputType = {
    id?: true
    content?: true
    like_count?: true
    retweet_count?: true
    comments_count?: true
    image?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    originalTweetId?: true
  }

  export type TweetMaxAggregateInputType = {
    id?: true
    content?: true
    like_count?: true
    retweet_count?: true
    comments_count?: true
    image?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    originalTweetId?: true
  }

  export type TweetCountAggregateInputType = {
    id?: true
    content?: true
    like_count?: true
    retweet_count?: true
    comments_count?: true
    image?: true
    created_at?: true
    updated_at?: true
    user_id?: true
    originalTweetId?: true
    _all?: true
  }

  export type TweetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweet to aggregate.
     */
    where?: tweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweets to fetch.
     */
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tweets
    **/
    _count?: true | TweetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TweetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TweetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TweetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TweetMaxAggregateInputType
  }

  export type GetTweetAggregateType<T extends TweetAggregateArgs> = {
        [P in keyof T & keyof AggregateTweet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTweet[P]>
      : GetScalarType<T[P], AggregateTweet[P]>
  }




  export type tweetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweetWhereInput
    orderBy?: tweetOrderByWithAggregationInput | tweetOrderByWithAggregationInput[]
    by: TweetScalarFieldEnum[] | TweetScalarFieldEnum
    having?: tweetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TweetCountAggregateInputType | true
    _avg?: TweetAvgAggregateInputType
    _sum?: TweetSumAggregateInputType
    _min?: TweetMinAggregateInputType
    _max?: TweetMaxAggregateInputType
  }


  export type TweetGroupByOutputType = {
    id: number
    content: string
    like_count: number
    retweet_count: number
    comments_count: number
    image: string | null
    created_at: Date
    updated_at: Date
    user_id: number
    originalTweetId: number | null
    _count: TweetCountAggregateOutputType | null
    _avg: TweetAvgAggregateOutputType | null
    _sum: TweetSumAggregateOutputType | null
    _min: TweetMinAggregateOutputType | null
    _max: TweetMaxAggregateOutputType | null
  }

  type GetTweetGroupByPayload<T extends tweetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TweetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TweetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TweetGroupByOutputType[P]>
            : GetScalarType<T[P], TweetGroupByOutputType[P]>
        }
      >
    >


  export type tweetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    like_count?: boolean
    retweet_count?: boolean
    comments_count?: boolean
    image?: boolean
    created_at?: boolean
    updated_at?: boolean
    user_id?: boolean
    originalTweetId?: boolean
    user?: boolean | tweet$userArgs<ExtArgs>
    likes?: boolean | tweet$likesArgs<ExtArgs>
    retweets?: boolean | tweet$retweetsArgs<ExtArgs>
    originalTweet?: boolean | tweet$originalTweetArgs<ExtArgs>
    replies?: boolean | tweet$repliesArgs<ExtArgs>
    _count?: boolean | TweetCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["tweet"]>

  export type tweetSelectScalar = {
    id?: boolean
    content?: boolean
    like_count?: boolean
    retweet_count?: boolean
    comments_count?: boolean
    image?: boolean
    created_at?: boolean
    updated_at?: boolean
    user_id?: boolean
    originalTweetId?: boolean
  }

  export type tweetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | tweet$userArgs<ExtArgs>
    likes?: boolean | tweet$likesArgs<ExtArgs>
    retweets?: boolean | tweet$retweetsArgs<ExtArgs>
    originalTweet?: boolean | tweet$originalTweetArgs<ExtArgs>
    replies?: boolean | tweet$repliesArgs<ExtArgs>
    _count?: boolean | TweetCountOutputTypeArgs<ExtArgs>
  }


  type tweetGetPayload<S extends boolean | null | undefined | tweetArgs> = $Types.GetResult<tweetPayload, S>

  type tweetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<tweetFindManyArgs, 'select' | 'include'> & {
      select?: TweetCountAggregateInputType | true
    }

  export interface tweetDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tweet'], meta: { name: 'tweet' } }
    /**
     * Find zero or one Tweet that matches the filter.
     * @param {tweetFindUniqueArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tweetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tweetFindUniqueArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tweet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tweetFindUniqueOrThrowArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tweetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tweet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetFindFirstArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tweetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetFindFirstArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tweet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetFindFirstOrThrowArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tweetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tweets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tweets
     * const tweets = await prisma.tweet.findMany()
     * 
     * // Get first 10 Tweets
     * const tweets = await prisma.tweet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tweetWithIdOnly = await prisma.tweet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tweetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tweet.
     * @param {tweetCreateArgs} args - Arguments to create a Tweet.
     * @example
     * // Create one Tweet
     * const Tweet = await prisma.tweet.create({
     *   data: {
     *     // ... data to create a Tweet
     *   }
     * })
     * 
    **/
    create<T extends tweetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tweetCreateArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tweets.
     *     @param {tweetCreateManyArgs} args - Arguments to create many Tweets.
     *     @example
     *     // Create many Tweets
     *     const tweet = await prisma.tweet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tweetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tweet.
     * @param {tweetDeleteArgs} args - Arguments to delete one Tweet.
     * @example
     * // Delete one Tweet
     * const Tweet = await prisma.tweet.delete({
     *   where: {
     *     // ... filter to delete one Tweet
     *   }
     * })
     * 
    **/
    delete<T extends tweetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tweetDeleteArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tweet.
     * @param {tweetUpdateArgs} args - Arguments to update one Tweet.
     * @example
     * // Update one Tweet
     * const tweet = await prisma.tweet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tweetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tweetUpdateArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tweets.
     * @param {tweetDeleteManyArgs} args - Arguments to filter Tweets to delete.
     * @example
     * // Delete a few Tweets
     * const { count } = await prisma.tweet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tweetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tweets
     * const tweet = await prisma.tweet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tweetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tweetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tweet.
     * @param {tweetUpsertArgs} args - Arguments to update or create a Tweet.
     * @example
     * // Update or create a Tweet
     * const tweet = await prisma.tweet.upsert({
     *   create: {
     *     // ... data to create a Tweet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tweet we want to update
     *   }
     * })
    **/
    upsert<T extends tweetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tweetUpsertArgs<ExtArgs>>
    ): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetCountArgs} args - Arguments to filter Tweets to count.
     * @example
     * // Count the number of Tweets
     * const count = await prisma.tweet.count({
     *   where: {
     *     // ... the filter for the Tweets we want to count
     *   }
     * })
    **/
    count<T extends tweetCountArgs>(
      args?: Subset<T, tweetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TweetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TweetAggregateArgs>(args: Subset<T, TweetAggregateArgs>): Prisma.PrismaPromise<GetTweetAggregateType<T>>

    /**
     * Group by Tweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tweetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tweetGroupByArgs['orderBy'] }
        : { orderBy?: tweetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tweet model
   */
  readonly fields: tweetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tweet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tweetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends tweet$userArgs<ExtArgs> = {}>(args?: Subset<T, tweet$userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    likes<T extends tweet$likesArgs<ExtArgs> = {}>(args?: Subset<T, tweet$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findMany'>| Null>;

    retweets<T extends tweet$retweetsArgs<ExtArgs> = {}>(args?: Subset<T, tweet$retweetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findMany'>| Null>;

    originalTweet<T extends tweet$originalTweetArgs<ExtArgs> = {}>(args?: Subset<T, tweet$originalTweetArgs<ExtArgs>>): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    replies<T extends tweet$repliesArgs<ExtArgs> = {}>(args?: Subset<T, tweet$repliesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findMany'>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the tweet model
   */ 
  interface tweetFieldRefs {
    readonly id: FieldRef<"tweet", 'Int'>
    readonly content: FieldRef<"tweet", 'String'>
    readonly like_count: FieldRef<"tweet", 'Int'>
    readonly retweet_count: FieldRef<"tweet", 'Int'>
    readonly comments_count: FieldRef<"tweet", 'Int'>
    readonly image: FieldRef<"tweet", 'String'>
    readonly created_at: FieldRef<"tweet", 'DateTime'>
    readonly updated_at: FieldRef<"tweet", 'DateTime'>
    readonly user_id: FieldRef<"tweet", 'Int'>
    readonly originalTweetId: FieldRef<"tweet", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * tweet findUnique
   */
  export type tweetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet to fetch.
     */
    where: tweetWhereUniqueInput
  }


  /**
   * tweet findUniqueOrThrow
   */
  export type tweetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet to fetch.
     */
    where: tweetWhereUniqueInput
  }


  /**
   * tweet findFirst
   */
  export type tweetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet to fetch.
     */
    where?: tweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweets to fetch.
     */
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweets.
     */
    cursor?: tweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweets.
     */
    distinct?: TweetScalarFieldEnum | TweetScalarFieldEnum[]
  }


  /**
   * tweet findFirstOrThrow
   */
  export type tweetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet to fetch.
     */
    where?: tweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweets to fetch.
     */
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweets.
     */
    cursor?: tweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweets.
     */
    distinct?: TweetScalarFieldEnum | TweetScalarFieldEnum[]
  }


  /**
   * tweet findMany
   */
  export type tweetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter, which tweets to fetch.
     */
    where?: tweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweets to fetch.
     */
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tweets.
     */
    cursor?: tweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweets.
     */
    skip?: number
    distinct?: TweetScalarFieldEnum | TweetScalarFieldEnum[]
  }


  /**
   * tweet create
   */
  export type tweetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * The data needed to create a tweet.
     */
    data: XOR<tweetCreateInput, tweetUncheckedCreateInput>
  }


  /**
   * tweet createMany
   */
  export type tweetCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tweets.
     */
    data: tweetCreateManyInput | tweetCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tweet update
   */
  export type tweetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * The data needed to update a tweet.
     */
    data: XOR<tweetUpdateInput, tweetUncheckedUpdateInput>
    /**
     * Choose, which tweet to update.
     */
    where: tweetWhereUniqueInput
  }


  /**
   * tweet updateMany
   */
  export type tweetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tweets.
     */
    data: XOR<tweetUpdateManyMutationInput, tweetUncheckedUpdateManyInput>
    /**
     * Filter which tweets to update
     */
    where?: tweetWhereInput
  }


  /**
   * tweet upsert
   */
  export type tweetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * The filter to search for the tweet to update in case it exists.
     */
    where: tweetWhereUniqueInput
    /**
     * In case the tweet found by the `where` argument doesn't exist, create a new tweet with this data.
     */
    create: XOR<tweetCreateInput, tweetUncheckedCreateInput>
    /**
     * In case the tweet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tweetUpdateInput, tweetUncheckedUpdateInput>
  }


  /**
   * tweet delete
   */
  export type tweetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    /**
     * Filter which tweet to delete.
     */
    where: tweetWhereUniqueInput
  }


  /**
   * tweet deleteMany
   */
  export type tweetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweets to delete
     */
    where?: tweetWhereInput
  }


  /**
   * tweet.user
   */
  export type tweet$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * tweet.likes
   */
  export type tweet$likesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    where?: tweet_likesWhereInput
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    cursor?: tweet_likesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Tweet_likesScalarFieldEnum | Tweet_likesScalarFieldEnum[]
  }


  /**
   * tweet.retweets
   */
  export type tweet$retweetsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    where?: tweet_retweetWhereInput
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    cursor?: tweet_retweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Tweet_retweetScalarFieldEnum | Tweet_retweetScalarFieldEnum[]
  }


  /**
   * tweet.originalTweet
   */
  export type tweet$originalTweetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    where?: tweetWhereInput
  }


  /**
   * tweet.replies
   */
  export type tweet$repliesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    where?: tweetWhereInput
    orderBy?: tweetOrderByWithRelationInput | tweetOrderByWithRelationInput[]
    cursor?: tweetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TweetScalarFieldEnum | TweetScalarFieldEnum[]
  }


  /**
   * tweet without action
   */
  export type tweetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
  }



  /**
   * Model tweet_likes
   */


  export type AggregateTweet_likes = {
    _count: Tweet_likesCountAggregateOutputType | null
    _avg: Tweet_likesAvgAggregateOutputType | null
    _sum: Tweet_likesSumAggregateOutputType | null
    _min: Tweet_likesMinAggregateOutputType | null
    _max: Tweet_likesMaxAggregateOutputType | null
  }

  export type Tweet_likesAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    tweet_id: number | null
  }

  export type Tweet_likesSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    tweet_id: number | null
  }

  export type Tweet_likesMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    tweet_id: number | null
    created_at: Date | null
  }

  export type Tweet_likesMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    tweet_id: number | null
    created_at: Date | null
  }

  export type Tweet_likesCountAggregateOutputType = {
    id: number
    user_id: number
    tweet_id: number
    created_at: number
    _all: number
  }


  export type Tweet_likesAvgAggregateInputType = {
    id?: true
    user_id?: true
    tweet_id?: true
  }

  export type Tweet_likesSumAggregateInputType = {
    id?: true
    user_id?: true
    tweet_id?: true
  }

  export type Tweet_likesMinAggregateInputType = {
    id?: true
    user_id?: true
    tweet_id?: true
    created_at?: true
  }

  export type Tweet_likesMaxAggregateInputType = {
    id?: true
    user_id?: true
    tweet_id?: true
    created_at?: true
  }

  export type Tweet_likesCountAggregateInputType = {
    id?: true
    user_id?: true
    tweet_id?: true
    created_at?: true
    _all?: true
  }

  export type Tweet_likesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweet_likes to aggregate.
     */
    where?: tweet_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_likes to fetch.
     */
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tweet_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tweet_likes
    **/
    _count?: true | Tweet_likesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tweet_likesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tweet_likesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tweet_likesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tweet_likesMaxAggregateInputType
  }

  export type GetTweet_likesAggregateType<T extends Tweet_likesAggregateArgs> = {
        [P in keyof T & keyof AggregateTweet_likes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTweet_likes[P]>
      : GetScalarType<T[P], AggregateTweet_likes[P]>
  }




  export type tweet_likesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_likesWhereInput
    orderBy?: tweet_likesOrderByWithAggregationInput | tweet_likesOrderByWithAggregationInput[]
    by: Tweet_likesScalarFieldEnum[] | Tweet_likesScalarFieldEnum
    having?: tweet_likesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tweet_likesCountAggregateInputType | true
    _avg?: Tweet_likesAvgAggregateInputType
    _sum?: Tweet_likesSumAggregateInputType
    _min?: Tweet_likesMinAggregateInputType
    _max?: Tweet_likesMaxAggregateInputType
  }


  export type Tweet_likesGroupByOutputType = {
    id: number
    user_id: number
    tweet_id: number
    created_at: Date
    _count: Tweet_likesCountAggregateOutputType | null
    _avg: Tweet_likesAvgAggregateOutputType | null
    _sum: Tweet_likesSumAggregateOutputType | null
    _min: Tweet_likesMinAggregateOutputType | null
    _max: Tweet_likesMaxAggregateOutputType | null
  }

  type GetTweet_likesGroupByPayload<T extends tweet_likesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Tweet_likesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tweet_likesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tweet_likesGroupByOutputType[P]>
            : GetScalarType<T[P], Tweet_likesGroupByOutputType[P]>
        }
      >
    >


  export type tweet_likesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    tweet_id?: boolean
    created_at?: boolean
    user?: boolean | tweet_likes$userArgs<ExtArgs>
    tweet?: boolean | tweet_likes$tweetArgs<ExtArgs>
  }, ExtArgs["result"]["tweet_likes"]>

  export type tweet_likesSelectScalar = {
    id?: boolean
    user_id?: boolean
    tweet_id?: boolean
    created_at?: boolean
  }

  export type tweet_likesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | tweet_likes$userArgs<ExtArgs>
    tweet?: boolean | tweet_likes$tweetArgs<ExtArgs>
  }


  type tweet_likesGetPayload<S extends boolean | null | undefined | tweet_likesArgs> = $Types.GetResult<tweet_likesPayload, S>

  type tweet_likesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<tweet_likesFindManyArgs, 'select' | 'include'> & {
      select?: Tweet_likesCountAggregateInputType | true
    }

  export interface tweet_likesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tweet_likes'], meta: { name: 'tweet_likes' } }
    /**
     * Find zero or one Tweet_likes that matches the filter.
     * @param {tweet_likesFindUniqueArgs} args - Arguments to find a Tweet_likes
     * @example
     * // Get one Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tweet_likesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesFindUniqueArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tweet_likes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tweet_likesFindUniqueOrThrowArgs} args - Arguments to find a Tweet_likes
     * @example
     * // Get one Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tweet_likesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tweet_likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesFindFirstArgs} args - Arguments to find a Tweet_likes
     * @example
     * // Get one Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tweet_likesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesFindFirstArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tweet_likes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesFindFirstOrThrowArgs} args - Arguments to find a Tweet_likes
     * @example
     * // Get one Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tweet_likesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tweet_likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findMany()
     * 
     * // Get first 10 Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tweet_likesWithIdOnly = await prisma.tweet_likes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tweet_likesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tweet_likes.
     * @param {tweet_likesCreateArgs} args - Arguments to create a Tweet_likes.
     * @example
     * // Create one Tweet_likes
     * const Tweet_likes = await prisma.tweet_likes.create({
     *   data: {
     *     // ... data to create a Tweet_likes
     *   }
     * })
     * 
    **/
    create<T extends tweet_likesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesCreateArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tweet_likes.
     *     @param {tweet_likesCreateManyArgs} args - Arguments to create many Tweet_likes.
     *     @example
     *     // Create many Tweet_likes
     *     const tweet_likes = await prisma.tweet_likes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tweet_likesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tweet_likes.
     * @param {tweet_likesDeleteArgs} args - Arguments to delete one Tweet_likes.
     * @example
     * // Delete one Tweet_likes
     * const Tweet_likes = await prisma.tweet_likes.delete({
     *   where: {
     *     // ... filter to delete one Tweet_likes
     *   }
     * })
     * 
    **/
    delete<T extends tweet_likesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesDeleteArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tweet_likes.
     * @param {tweet_likesUpdateArgs} args - Arguments to update one Tweet_likes.
     * @example
     * // Update one Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tweet_likesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesUpdateArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tweet_likes.
     * @param {tweet_likesDeleteManyArgs} args - Arguments to filter Tweet_likes to delete.
     * @example
     * // Delete a few Tweet_likes
     * const { count } = await prisma.tweet_likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tweet_likesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_likesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tweet_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tweet_likesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tweet_likes.
     * @param {tweet_likesUpsertArgs} args - Arguments to update or create a Tweet_likes.
     * @example
     * // Update or create a Tweet_likes
     * const tweet_likes = await prisma.tweet_likes.upsert({
     *   create: {
     *     // ... data to create a Tweet_likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tweet_likes we want to update
     *   }
     * })
    **/
    upsert<T extends tweet_likesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_likesUpsertArgs<ExtArgs>>
    ): Prisma__tweet_likesClient<$Types.GetResult<tweet_likesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tweet_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesCountArgs} args - Arguments to filter Tweet_likes to count.
     * @example
     * // Count the number of Tweet_likes
     * const count = await prisma.tweet_likes.count({
     *   where: {
     *     // ... the filter for the Tweet_likes we want to count
     *   }
     * })
    **/
    count<T extends tweet_likesCountArgs>(
      args?: Subset<T, tweet_likesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tweet_likesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tweet_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tweet_likesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tweet_likesAggregateArgs>(args: Subset<T, Tweet_likesAggregateArgs>): Prisma.PrismaPromise<GetTweet_likesAggregateType<T>>

    /**
     * Group by Tweet_likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_likesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tweet_likesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tweet_likesGroupByArgs['orderBy'] }
        : { orderBy?: tweet_likesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tweet_likesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweet_likesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tweet_likes model
   */
  readonly fields: tweet_likesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tweet_likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tweet_likesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends tweet_likes$userArgs<ExtArgs> = {}>(args?: Subset<T, tweet_likes$userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    tweet<T extends tweet_likes$tweetArgs<ExtArgs> = {}>(args?: Subset<T, tweet_likes$tweetArgs<ExtArgs>>): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the tweet_likes model
   */ 
  interface tweet_likesFieldRefs {
    readonly id: FieldRef<"tweet_likes", 'Int'>
    readonly user_id: FieldRef<"tweet_likes", 'Int'>
    readonly tweet_id: FieldRef<"tweet_likes", 'Int'>
    readonly created_at: FieldRef<"tweet_likes", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * tweet_likes findUnique
   */
  export type tweet_likesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter, which tweet_likes to fetch.
     */
    where: tweet_likesWhereUniqueInput
  }


  /**
   * tweet_likes findUniqueOrThrow
   */
  export type tweet_likesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter, which tweet_likes to fetch.
     */
    where: tweet_likesWhereUniqueInput
  }


  /**
   * tweet_likes findFirst
   */
  export type tweet_likesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter, which tweet_likes to fetch.
     */
    where?: tweet_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_likes to fetch.
     */
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweet_likes.
     */
    cursor?: tweet_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweet_likes.
     */
    distinct?: Tweet_likesScalarFieldEnum | Tweet_likesScalarFieldEnum[]
  }


  /**
   * tweet_likes findFirstOrThrow
   */
  export type tweet_likesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter, which tweet_likes to fetch.
     */
    where?: tweet_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_likes to fetch.
     */
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweet_likes.
     */
    cursor?: tweet_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweet_likes.
     */
    distinct?: Tweet_likesScalarFieldEnum | Tweet_likesScalarFieldEnum[]
  }


  /**
   * tweet_likes findMany
   */
  export type tweet_likesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter, which tweet_likes to fetch.
     */
    where?: tweet_likesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_likes to fetch.
     */
    orderBy?: tweet_likesOrderByWithRelationInput | tweet_likesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tweet_likes.
     */
    cursor?: tweet_likesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_likes.
     */
    skip?: number
    distinct?: Tweet_likesScalarFieldEnum | Tweet_likesScalarFieldEnum[]
  }


  /**
   * tweet_likes create
   */
  export type tweet_likesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * The data needed to create a tweet_likes.
     */
    data: XOR<tweet_likesCreateInput, tweet_likesUncheckedCreateInput>
  }


  /**
   * tweet_likes createMany
   */
  export type tweet_likesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tweet_likes.
     */
    data: tweet_likesCreateManyInput | tweet_likesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tweet_likes update
   */
  export type tweet_likesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * The data needed to update a tweet_likes.
     */
    data: XOR<tweet_likesUpdateInput, tweet_likesUncheckedUpdateInput>
    /**
     * Choose, which tweet_likes to update.
     */
    where: tweet_likesWhereUniqueInput
  }


  /**
   * tweet_likes updateMany
   */
  export type tweet_likesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tweet_likes.
     */
    data: XOR<tweet_likesUpdateManyMutationInput, tweet_likesUncheckedUpdateManyInput>
    /**
     * Filter which tweet_likes to update
     */
    where?: tweet_likesWhereInput
  }


  /**
   * tweet_likes upsert
   */
  export type tweet_likesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * The filter to search for the tweet_likes to update in case it exists.
     */
    where: tweet_likesWhereUniqueInput
    /**
     * In case the tweet_likes found by the `where` argument doesn't exist, create a new tweet_likes with this data.
     */
    create: XOR<tweet_likesCreateInput, tweet_likesUncheckedCreateInput>
    /**
     * In case the tweet_likes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tweet_likesUpdateInput, tweet_likesUncheckedUpdateInput>
  }


  /**
   * tweet_likes delete
   */
  export type tweet_likesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
    /**
     * Filter which tweet_likes to delete.
     */
    where: tweet_likesWhereUniqueInput
  }


  /**
   * tweet_likes deleteMany
   */
  export type tweet_likesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweet_likes to delete
     */
    where?: tweet_likesWhereInput
  }


  /**
   * tweet_likes.user
   */
  export type tweet_likes$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * tweet_likes.tweet
   */
  export type tweet_likes$tweetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    where?: tweetWhereInput
  }


  /**
   * tweet_likes without action
   */
  export type tweet_likesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_likes
     */
    select?: tweet_likesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_likesInclude<ExtArgs> | null
  }



  /**
   * Model tweet_retweet
   */


  export type AggregateTweet_retweet = {
    _count: Tweet_retweetCountAggregateOutputType | null
    _avg: Tweet_retweetAvgAggregateOutputType | null
    _sum: Tweet_retweetSumAggregateOutputType | null
    _min: Tweet_retweetMinAggregateOutputType | null
    _max: Tweet_retweetMaxAggregateOutputType | null
  }

  export type Tweet_retweetAvgAggregateOutputType = {
    id: number | null
    tweet_id: number | null
    user_id: number | null
  }

  export type Tweet_retweetSumAggregateOutputType = {
    id: number | null
    tweet_id: number | null
    user_id: number | null
  }

  export type Tweet_retweetMinAggregateOutputType = {
    id: number | null
    tweet_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type Tweet_retweetMaxAggregateOutputType = {
    id: number | null
    tweet_id: number | null
    user_id: number | null
    created_at: Date | null
  }

  export type Tweet_retweetCountAggregateOutputType = {
    id: number
    tweet_id: number
    user_id: number
    created_at: number
    _all: number
  }


  export type Tweet_retweetAvgAggregateInputType = {
    id?: true
    tweet_id?: true
    user_id?: true
  }

  export type Tweet_retweetSumAggregateInputType = {
    id?: true
    tweet_id?: true
    user_id?: true
  }

  export type Tweet_retweetMinAggregateInputType = {
    id?: true
    tweet_id?: true
    user_id?: true
    created_at?: true
  }

  export type Tweet_retweetMaxAggregateInputType = {
    id?: true
    tweet_id?: true
    user_id?: true
    created_at?: true
  }

  export type Tweet_retweetCountAggregateInputType = {
    id?: true
    tweet_id?: true
    user_id?: true
    created_at?: true
    _all?: true
  }

  export type Tweet_retweetAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweet_retweet to aggregate.
     */
    where?: tweet_retweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_retweets to fetch.
     */
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tweet_retweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tweet_retweets
    **/
    _count?: true | Tweet_retweetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Tweet_retweetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Tweet_retweetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Tweet_retweetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Tweet_retweetMaxAggregateInputType
  }

  export type GetTweet_retweetAggregateType<T extends Tweet_retweetAggregateArgs> = {
        [P in keyof T & keyof AggregateTweet_retweet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTweet_retweet[P]>
      : GetScalarType<T[P], AggregateTweet_retweet[P]>
  }




  export type tweet_retweetGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: tweet_retweetWhereInput
    orderBy?: tweet_retweetOrderByWithAggregationInput | tweet_retweetOrderByWithAggregationInput[]
    by: Tweet_retweetScalarFieldEnum[] | Tweet_retweetScalarFieldEnum
    having?: tweet_retweetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Tweet_retweetCountAggregateInputType | true
    _avg?: Tweet_retweetAvgAggregateInputType
    _sum?: Tweet_retweetSumAggregateInputType
    _min?: Tweet_retweetMinAggregateInputType
    _max?: Tweet_retweetMaxAggregateInputType
  }


  export type Tweet_retweetGroupByOutputType = {
    id: number
    tweet_id: number
    user_id: number
    created_at: Date
    _count: Tweet_retweetCountAggregateOutputType | null
    _avg: Tweet_retweetAvgAggregateOutputType | null
    _sum: Tweet_retweetSumAggregateOutputType | null
    _min: Tweet_retweetMinAggregateOutputType | null
    _max: Tweet_retweetMaxAggregateOutputType | null
  }

  type GetTweet_retweetGroupByPayload<T extends tweet_retweetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Tweet_retweetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Tweet_retweetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Tweet_retweetGroupByOutputType[P]>
            : GetScalarType<T[P], Tweet_retweetGroupByOutputType[P]>
        }
      >
    >


  export type tweet_retweetSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tweet_id?: boolean
    user_id?: boolean
    created_at?: boolean
    tweet?: boolean | tweet_retweet$tweetArgs<ExtArgs>
    user?: boolean | tweet_retweet$userArgs<ExtArgs>
  }, ExtArgs["result"]["tweet_retweet"]>

  export type tweet_retweetSelectScalar = {
    id?: boolean
    tweet_id?: boolean
    user_id?: boolean
    created_at?: boolean
  }

  export type tweet_retweetInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tweet?: boolean | tweet_retweet$tweetArgs<ExtArgs>
    user?: boolean | tweet_retweet$userArgs<ExtArgs>
  }


  type tweet_retweetGetPayload<S extends boolean | null | undefined | tweet_retweetArgs> = $Types.GetResult<tweet_retweetPayload, S>

  type tweet_retweetCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<tweet_retweetFindManyArgs, 'select' | 'include'> & {
      select?: Tweet_retweetCountAggregateInputType | true
    }

  export interface tweet_retweetDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tweet_retweet'], meta: { name: 'tweet_retweet' } }
    /**
     * Find zero or one Tweet_retweet that matches the filter.
     * @param {tweet_retweetFindUniqueArgs} args - Arguments to find a Tweet_retweet
     * @example
     * // Get one Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends tweet_retweetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetFindUniqueArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tweet_retweet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {tweet_retweetFindUniqueOrThrowArgs} args - Arguments to find a Tweet_retweet
     * @example
     * // Get one Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends tweet_retweetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tweet_retweet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetFindFirstArgs} args - Arguments to find a Tweet_retweet
     * @example
     * // Get one Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends tweet_retweetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetFindFirstArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tweet_retweet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetFindFirstOrThrowArgs} args - Arguments to find a Tweet_retweet
     * @example
     * // Get one Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends tweet_retweetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tweet_retweets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tweet_retweets
     * const tweet_retweets = await prisma.tweet_retweet.findMany()
     * 
     * // Get first 10 Tweet_retweets
     * const tweet_retweets = await prisma.tweet_retweet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tweet_retweetWithIdOnly = await prisma.tweet_retweet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends tweet_retweetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tweet_retweet.
     * @param {tweet_retweetCreateArgs} args - Arguments to create a Tweet_retweet.
     * @example
     * // Create one Tweet_retweet
     * const Tweet_retweet = await prisma.tweet_retweet.create({
     *   data: {
     *     // ... data to create a Tweet_retweet
     *   }
     * })
     * 
    **/
    create<T extends tweet_retweetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetCreateArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tweet_retweets.
     *     @param {tweet_retweetCreateManyArgs} args - Arguments to create many Tweet_retweets.
     *     @example
     *     // Create many Tweet_retweets
     *     const tweet_retweet = await prisma.tweet_retweet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends tweet_retweetCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tweet_retweet.
     * @param {tweet_retweetDeleteArgs} args - Arguments to delete one Tweet_retweet.
     * @example
     * // Delete one Tweet_retweet
     * const Tweet_retweet = await prisma.tweet_retweet.delete({
     *   where: {
     *     // ... filter to delete one Tweet_retweet
     *   }
     * })
     * 
    **/
    delete<T extends tweet_retweetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetDeleteArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tweet_retweet.
     * @param {tweet_retweetUpdateArgs} args - Arguments to update one Tweet_retweet.
     * @example
     * // Update one Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends tweet_retweetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetUpdateArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tweet_retweets.
     * @param {tweet_retweetDeleteManyArgs} args - Arguments to filter Tweet_retweets to delete.
     * @example
     * // Delete a few Tweet_retweets
     * const { count } = await prisma.tweet_retweet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends tweet_retweetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, tweet_retweetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tweet_retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tweet_retweets
     * const tweet_retweet = await prisma.tweet_retweet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends tweet_retweetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tweet_retweet.
     * @param {tweet_retweetUpsertArgs} args - Arguments to update or create a Tweet_retweet.
     * @example
     * // Update or create a Tweet_retweet
     * const tweet_retweet = await prisma.tweet_retweet.upsert({
     *   create: {
     *     // ... data to create a Tweet_retweet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tweet_retweet we want to update
     *   }
     * })
    **/
    upsert<T extends tweet_retweetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, tweet_retweetUpsertArgs<ExtArgs>>
    ): Prisma__tweet_retweetClient<$Types.GetResult<tweet_retweetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tweet_retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetCountArgs} args - Arguments to filter Tweet_retweets to count.
     * @example
     * // Count the number of Tweet_retweets
     * const count = await prisma.tweet_retweet.count({
     *   where: {
     *     // ... the filter for the Tweet_retweets we want to count
     *   }
     * })
    **/
    count<T extends tweet_retweetCountArgs>(
      args?: Subset<T, tweet_retweetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Tweet_retweetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tweet_retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Tweet_retweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Tweet_retweetAggregateArgs>(args: Subset<T, Tweet_retweetAggregateArgs>): Prisma.PrismaPromise<GetTweet_retweetAggregateType<T>>

    /**
     * Group by Tweet_retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tweet_retweetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tweet_retweetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tweet_retweetGroupByArgs['orderBy'] }
        : { orderBy?: tweet_retweetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tweet_retweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweet_retweetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tweet_retweet model
   */
  readonly fields: tweet_retweetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tweet_retweet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__tweet_retweetClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tweet<T extends tweet_retweet$tweetArgs<ExtArgs> = {}>(args?: Subset<T, tweet_retweet$tweetArgs<ExtArgs>>): Prisma__tweetClient<$Types.GetResult<tweetPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    user<T extends tweet_retweet$userArgs<ExtArgs> = {}>(args?: Subset<T, tweet_retweet$userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the tweet_retweet model
   */ 
  interface tweet_retweetFieldRefs {
    readonly id: FieldRef<"tweet_retweet", 'Int'>
    readonly tweet_id: FieldRef<"tweet_retweet", 'Int'>
    readonly user_id: FieldRef<"tweet_retweet", 'Int'>
    readonly created_at: FieldRef<"tweet_retweet", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * tweet_retweet findUnique
   */
  export type tweet_retweetFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet_retweet to fetch.
     */
    where: tweet_retweetWhereUniqueInput
  }


  /**
   * tweet_retweet findUniqueOrThrow
   */
  export type tweet_retweetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet_retweet to fetch.
     */
    where: tweet_retweetWhereUniqueInput
  }


  /**
   * tweet_retweet findFirst
   */
  export type tweet_retweetFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet_retweet to fetch.
     */
    where?: tweet_retweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_retweets to fetch.
     */
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweet_retweets.
     */
    cursor?: tweet_retweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweet_retweets.
     */
    distinct?: Tweet_retweetScalarFieldEnum | Tweet_retweetScalarFieldEnum[]
  }


  /**
   * tweet_retweet findFirstOrThrow
   */
  export type tweet_retweetFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet_retweet to fetch.
     */
    where?: tweet_retweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_retweets to fetch.
     */
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tweet_retweets.
     */
    cursor?: tweet_retweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_retweets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tweet_retweets.
     */
    distinct?: Tweet_retweetScalarFieldEnum | Tweet_retweetScalarFieldEnum[]
  }


  /**
   * tweet_retweet findMany
   */
  export type tweet_retweetFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter, which tweet_retweets to fetch.
     */
    where?: tweet_retweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tweet_retweets to fetch.
     */
    orderBy?: tweet_retweetOrderByWithRelationInput | tweet_retweetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tweet_retweets.
     */
    cursor?: tweet_retweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tweet_retweets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tweet_retweets.
     */
    skip?: number
    distinct?: Tweet_retweetScalarFieldEnum | Tweet_retweetScalarFieldEnum[]
  }


  /**
   * tweet_retweet create
   */
  export type tweet_retweetCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * The data needed to create a tweet_retweet.
     */
    data: XOR<tweet_retweetCreateInput, tweet_retweetUncheckedCreateInput>
  }


  /**
   * tweet_retweet createMany
   */
  export type tweet_retweetCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tweet_retweets.
     */
    data: tweet_retweetCreateManyInput | tweet_retweetCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * tweet_retweet update
   */
  export type tweet_retweetUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * The data needed to update a tweet_retweet.
     */
    data: XOR<tweet_retweetUpdateInput, tweet_retweetUncheckedUpdateInput>
    /**
     * Choose, which tweet_retweet to update.
     */
    where: tweet_retweetWhereUniqueInput
  }


  /**
   * tweet_retweet updateMany
   */
  export type tweet_retweetUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tweet_retweets.
     */
    data: XOR<tweet_retweetUpdateManyMutationInput, tweet_retweetUncheckedUpdateManyInput>
    /**
     * Filter which tweet_retweets to update
     */
    where?: tweet_retweetWhereInput
  }


  /**
   * tweet_retweet upsert
   */
  export type tweet_retweetUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * The filter to search for the tweet_retweet to update in case it exists.
     */
    where: tweet_retweetWhereUniqueInput
    /**
     * In case the tweet_retweet found by the `where` argument doesn't exist, create a new tweet_retweet with this data.
     */
    create: XOR<tweet_retweetCreateInput, tweet_retweetUncheckedCreateInput>
    /**
     * In case the tweet_retweet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tweet_retweetUpdateInput, tweet_retweetUncheckedUpdateInput>
  }


  /**
   * tweet_retweet delete
   */
  export type tweet_retweetDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
    /**
     * Filter which tweet_retweet to delete.
     */
    where: tweet_retweetWhereUniqueInput
  }


  /**
   * tweet_retweet deleteMany
   */
  export type tweet_retweetDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which tweet_retweets to delete
     */
    where?: tweet_retweetWhereInput
  }


  /**
   * tweet_retweet.tweet
   */
  export type tweet_retweet$tweetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet
     */
    select?: tweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweetInclude<ExtArgs> | null
    where?: tweetWhereInput
  }


  /**
   * tweet_retweet.user
   */
  export type tweet_retweet$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
  }


  /**
   * tweet_retweet without action
   */
  export type tweet_retweetArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tweet_retweet
     */
    select?: tweet_retweetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: tweet_retweetInclude<ExtArgs> | null
  }



  /**
   * Model Follows
   */


  export type AggregateFollows = {
    _count: FollowsCountAggregateOutputType | null
    _avg: FollowsAvgAggregateOutputType | null
    _sum: FollowsSumAggregateOutputType | null
    _min: FollowsMinAggregateOutputType | null
    _max: FollowsMaxAggregateOutputType | null
  }

  export type FollowsAvgAggregateOutputType = {
    followerId: number | null
    followingId: number | null
  }

  export type FollowsSumAggregateOutputType = {
    followerId: number | null
    followingId: number | null
  }

  export type FollowsMinAggregateOutputType = {
    followerId: number | null
    followingId: number | null
  }

  export type FollowsMaxAggregateOutputType = {
    followerId: number | null
    followingId: number | null
  }

  export type FollowsCountAggregateOutputType = {
    followerId: number
    followingId: number
    _all: number
  }


  export type FollowsAvgAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsSumAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsMinAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsMaxAggregateInputType = {
    followerId?: true
    followingId?: true
  }

  export type FollowsCountAggregateInputType = {
    followerId?: true
    followingId?: true
    _all?: true
  }

  export type FollowsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to aggregate.
     */
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Follows
    **/
    _count?: true | FollowsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowsMaxAggregateInputType
  }

  export type GetFollowsAggregateType<T extends FollowsAggregateArgs> = {
        [P in keyof T & keyof AggregateFollows]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollows[P]>
      : GetScalarType<T[P], AggregateFollows[P]>
  }




  export type FollowsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowsWhereInput
    orderBy?: FollowsOrderByWithAggregationInput | FollowsOrderByWithAggregationInput[]
    by: FollowsScalarFieldEnum[] | FollowsScalarFieldEnum
    having?: FollowsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowsCountAggregateInputType | true
    _avg?: FollowsAvgAggregateInputType
    _sum?: FollowsSumAggregateInputType
    _min?: FollowsMinAggregateInputType
    _max?: FollowsMaxAggregateInputType
  }


  export type FollowsGroupByOutputType = {
    followerId: number
    followingId: number
    _count: FollowsCountAggregateOutputType | null
    _avg: FollowsAvgAggregateOutputType | null
    _sum: FollowsSumAggregateOutputType | null
    _min: FollowsMinAggregateOutputType | null
    _max: FollowsMaxAggregateOutputType | null
  }

  type GetFollowsGroupByPayload<T extends FollowsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowsGroupByOutputType[P]>
            : GetScalarType<T[P], FollowsGroupByOutputType[P]>
        }
      >
    >


  export type FollowsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    followerId?: boolean
    followingId?: boolean
    follower?: boolean | userArgs<ExtArgs>
    following?: boolean | userArgs<ExtArgs>
  }, ExtArgs["result"]["follows"]>

  export type FollowsSelectScalar = {
    followerId?: boolean
    followingId?: boolean
  }

  export type FollowsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    follower?: boolean | userArgs<ExtArgs>
    following?: boolean | userArgs<ExtArgs>
  }


  type FollowsGetPayload<S extends boolean | null | undefined | FollowsArgs> = $Types.GetResult<FollowsPayload, S>

  type FollowsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FollowsFindManyArgs, 'select' | 'include'> & {
      select?: FollowsCountAggregateInputType | true
    }

  export interface FollowsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Follows'], meta: { name: 'Follows' } }
    /**
     * Find zero or one Follows that matches the filter.
     * @param {FollowsFindUniqueArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsFindUniqueArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Follows that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowsFindUniqueOrThrowArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindFirstArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsFindFirstArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Follows that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindFirstOrThrowArgs} args - Arguments to find a Follows
     * @example
     * // Get one Follows
     * const follows = await prisma.follows.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Follows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Follows
     * const follows = await prisma.follows.findMany()
     * 
     * // Get first 10 Follows
     * const follows = await prisma.follows.findMany({ take: 10 })
     * 
     * // Only select the `followerId`
     * const followsWithFollowerIdOnly = await prisma.follows.findMany({ select: { followerId: true } })
     * 
    **/
    findMany<T extends FollowsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Follows.
     * @param {FollowsCreateArgs} args - Arguments to create a Follows.
     * @example
     * // Create one Follows
     * const Follows = await prisma.follows.create({
     *   data: {
     *     // ... data to create a Follows
     *   }
     * })
     * 
    **/
    create<T extends FollowsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsCreateArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Follows.
     *     @param {FollowsCreateManyArgs} args - Arguments to create many Follows.
     *     @example
     *     // Create many Follows
     *     const follows = await prisma.follows.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Follows.
     * @param {FollowsDeleteArgs} args - Arguments to delete one Follows.
     * @example
     * // Delete one Follows
     * const Follows = await prisma.follows.delete({
     *   where: {
     *     // ... filter to delete one Follows
     *   }
     * })
     * 
    **/
    delete<T extends FollowsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsDeleteArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Follows.
     * @param {FollowsUpdateArgs} args - Arguments to update one Follows.
     * @example
     * // Update one Follows
     * const follows = await prisma.follows.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsUpdateArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Follows.
     * @param {FollowsDeleteManyArgs} args - Arguments to filter Follows to delete.
     * @example
     * // Delete a few Follows
     * const { count } = await prisma.follows.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Follows
     * const follows = await prisma.follows.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Follows.
     * @param {FollowsUpsertArgs} args - Arguments to update or create a Follows.
     * @example
     * // Update or create a Follows
     * const follows = await prisma.follows.upsert({
     *   create: {
     *     // ... data to create a Follows
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Follows we want to update
     *   }
     * })
    **/
    upsert<T extends FollowsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FollowsUpsertArgs<ExtArgs>>
    ): Prisma__FollowsClient<$Types.GetResult<FollowsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsCountArgs} args - Arguments to filter Follows to count.
     * @example
     * // Count the number of Follows
     * const count = await prisma.follows.count({
     *   where: {
     *     // ... the filter for the Follows we want to count
     *   }
     * })
    **/
    count<T extends FollowsCountArgs>(
      args?: Subset<T, FollowsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowsAggregateArgs>(args: Subset<T, FollowsAggregateArgs>): Prisma.PrismaPromise<GetFollowsAggregateType<T>>

    /**
     * Group by Follows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowsGroupByArgs['orderBy'] }
        : { orderBy?: FollowsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Follows model
   */
  readonly fields: FollowsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Follows.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    follower<T extends userArgs<ExtArgs> = {}>(args?: Subset<T, userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    following<T extends userArgs<ExtArgs> = {}>(args?: Subset<T, userArgs<ExtArgs>>): Prisma__userClient<$Types.GetResult<userPayload<ExtArgs>, T, 'findUnique'> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  /**
   * Fields of the Follows model
   */ 
  interface FollowsFieldRefs {
    readonly followerId: FieldRef<"Follows", 'Int'>
    readonly followingId: FieldRef<"Follows", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Follows findUnique
   */
  export type FollowsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows findUniqueOrThrow
   */
  export type FollowsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows findFirst
   */
  export type FollowsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowsScalarFieldEnum | FollowsScalarFieldEnum[]
  }


  /**
   * Follows findFirstOrThrow
   */
  export type FollowsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Follows.
     */
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Follows.
     */
    distinct?: FollowsScalarFieldEnum | FollowsScalarFieldEnum[]
  }


  /**
   * Follows findMany
   */
  export type FollowsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter, which Follows to fetch.
     */
    where?: FollowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Follows to fetch.
     */
    orderBy?: FollowsOrderByWithRelationInput | FollowsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Follows.
     */
    cursor?: FollowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Follows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Follows.
     */
    skip?: number
    distinct?: FollowsScalarFieldEnum | FollowsScalarFieldEnum[]
  }


  /**
   * Follows create
   */
  export type FollowsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * The data needed to create a Follows.
     */
    data: XOR<FollowsCreateInput, FollowsUncheckedCreateInput>
  }


  /**
   * Follows createMany
   */
  export type FollowsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Follows.
     */
    data: FollowsCreateManyInput | FollowsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Follows update
   */
  export type FollowsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * The data needed to update a Follows.
     */
    data: XOR<FollowsUpdateInput, FollowsUncheckedUpdateInput>
    /**
     * Choose, which Follows to update.
     */
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows updateMany
   */
  export type FollowsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Follows.
     */
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyInput>
    /**
     * Filter which Follows to update
     */
    where?: FollowsWhereInput
  }


  /**
   * Follows upsert
   */
  export type FollowsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * The filter to search for the Follows to update in case it exists.
     */
    where: FollowsWhereUniqueInput
    /**
     * In case the Follows found by the `where` argument doesn't exist, create a new Follows with this data.
     */
    create: XOR<FollowsCreateInput, FollowsUncheckedCreateInput>
    /**
     * In case the Follows was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowsUpdateInput, FollowsUncheckedUpdateInput>
  }


  /**
   * Follows delete
   */
  export type FollowsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
    /**
     * Filter which Follows to delete.
     */
    where: FollowsWhereUniqueInput
  }


  /**
   * Follows deleteMany
   */
  export type FollowsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Follows to delete
     */
    where?: FollowsWhereInput
  }


  /**
   * Follows without action
   */
  export type FollowsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Follows
     */
    select?: FollowsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    email: 'email',
    password: 'password',
    tweet_count: 'tweet_count',
    following_count: 'following_count',
    followers_count: 'followers_count',
    birthday: 'birthday',
    description: 'description',
    profile_photo: 'profile_photo',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TweetScalarFieldEnum: {
    id: 'id',
    content: 'content',
    like_count: 'like_count',
    retweet_count: 'retweet_count',
    comments_count: 'comments_count',
    image: 'image',
    created_at: 'created_at',
    updated_at: 'updated_at',
    user_id: 'user_id',
    originalTweetId: 'originalTweetId'
  };

  export type TweetScalarFieldEnum = (typeof TweetScalarFieldEnum)[keyof typeof TweetScalarFieldEnum]


  export const Tweet_likesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    tweet_id: 'tweet_id',
    created_at: 'created_at'
  };

  export type Tweet_likesScalarFieldEnum = (typeof Tweet_likesScalarFieldEnum)[keyof typeof Tweet_likesScalarFieldEnum]


  export const Tweet_retweetScalarFieldEnum: {
    id: 'id',
    tweet_id: 'tweet_id',
    user_id: 'user_id',
    created_at: 'created_at'
  };

  export type Tweet_retweetScalarFieldEnum = (typeof Tweet_retweetScalarFieldEnum)[keyof typeof Tweet_retweetScalarFieldEnum]


  export const FollowsScalarFieldEnum: {
    followerId: 'followerId',
    followingId: 'followingId'
  };

  export type FollowsScalarFieldEnum = (typeof FollowsScalarFieldEnum)[keyof typeof FollowsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    name?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    tweet_count?: IntFilter<"user"> | number
    following_count?: IntFilter<"user"> | number
    followers_count?: IntFilter<"user"> | number
    birthday?: DateTimeNullableFilter<"user"> | Date | string | null
    description?: StringNullableFilter<"user"> | string | null
    profile_photo?: StringNullableFilter<"user"> | string | null
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeFilter<"user"> | Date | string
    tweets?: TweetListRelationFilter
    likedTweets?: Tweet_likesListRelationFilter
    retweetedTweets?: Tweet_retweetListRelationFilter
    followers?: FollowsListRelationFilter
    following?: FollowsListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
    birthday?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profile_photo?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    tweets?: tweetOrderByRelationAggregateInput
    likedTweets?: tweet_likesOrderByRelationAggregateInput
    retweetedTweets?: tweet_retweetOrderByRelationAggregateInput
    followers?: FollowsOrderByRelationAggregateInput
    following?: FollowsOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    tweet_count?: IntFilter<"user"> | number
    following_count?: IntFilter<"user"> | number
    followers_count?: IntFilter<"user"> | number
    birthday?: DateTimeNullableFilter<"user"> | Date | string | null
    description?: StringNullableFilter<"user"> | string | null
    profile_photo?: StringNullableFilter<"user"> | string | null
    created_at?: DateTimeFilter<"user"> | Date | string
    updated_at?: DateTimeFilter<"user"> | Date | string
    tweets?: TweetListRelationFilter
    likedTweets?: Tweet_likesListRelationFilter
    retweetedTweets?: Tweet_retweetListRelationFilter
    followers?: FollowsListRelationFilter
    following?: FollowsListRelationFilter
  }, "id" | "username" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
    birthday?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    profile_photo?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    name?: StringWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    tweet_count?: IntWithAggregatesFilter<"user"> | number
    following_count?: IntWithAggregatesFilter<"user"> | number
    followers_count?: IntWithAggregatesFilter<"user"> | number
    birthday?: DateTimeNullableWithAggregatesFilter<"user"> | Date | string | null
    description?: StringNullableWithAggregatesFilter<"user"> | string | null
    profile_photo?: StringNullableWithAggregatesFilter<"user"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type tweetWhereInput = {
    AND?: tweetWhereInput | tweetWhereInput[]
    OR?: tweetWhereInput[]
    NOT?: tweetWhereInput | tweetWhereInput[]
    id?: IntFilter<"tweet"> | number
    content?: StringFilter<"tweet"> | string
    like_count?: IntFilter<"tweet"> | number
    retweet_count?: IntFilter<"tweet"> | number
    comments_count?: IntFilter<"tweet"> | number
    image?: StringNullableFilter<"tweet"> | string | null
    created_at?: DateTimeFilter<"tweet"> | Date | string
    updated_at?: DateTimeFilter<"tweet"> | Date | string
    user_id?: IntFilter<"tweet"> | number
    originalTweetId?: IntNullableFilter<"tweet"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    likes?: Tweet_likesListRelationFilter
    retweets?: Tweet_retweetListRelationFilter
    originalTweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
    replies?: TweetListRelationFilter
  }

  export type tweetOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    image?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrderInput | SortOrder
    user?: userOrderByWithRelationInput
    likes?: tweet_likesOrderByRelationAggregateInput
    retweets?: tweet_retweetOrderByRelationAggregateInput
    originalTweet?: tweetOrderByWithRelationInput
    replies?: tweetOrderByRelationAggregateInput
  }

  export type tweetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tweetWhereInput | tweetWhereInput[]
    OR?: tweetWhereInput[]
    NOT?: tweetWhereInput | tweetWhereInput[]
    content?: StringFilter<"tweet"> | string
    like_count?: IntFilter<"tweet"> | number
    retweet_count?: IntFilter<"tweet"> | number
    comments_count?: IntFilter<"tweet"> | number
    image?: StringNullableFilter<"tweet"> | string | null
    created_at?: DateTimeFilter<"tweet"> | Date | string
    updated_at?: DateTimeFilter<"tweet"> | Date | string
    user_id?: IntFilter<"tweet"> | number
    originalTweetId?: IntNullableFilter<"tweet"> | number | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    likes?: Tweet_likesListRelationFilter
    retweets?: Tweet_retweetListRelationFilter
    originalTweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
    replies?: TweetListRelationFilter
  }, "id">

  export type tweetOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    image?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrderInput | SortOrder
    _count?: tweetCountOrderByAggregateInput
    _avg?: tweetAvgOrderByAggregateInput
    _max?: tweetMaxOrderByAggregateInput
    _min?: tweetMinOrderByAggregateInput
    _sum?: tweetSumOrderByAggregateInput
  }

  export type tweetScalarWhereWithAggregatesInput = {
    AND?: tweetScalarWhereWithAggregatesInput | tweetScalarWhereWithAggregatesInput[]
    OR?: tweetScalarWhereWithAggregatesInput[]
    NOT?: tweetScalarWhereWithAggregatesInput | tweetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tweet"> | number
    content?: StringWithAggregatesFilter<"tweet"> | string
    like_count?: IntWithAggregatesFilter<"tweet"> | number
    retweet_count?: IntWithAggregatesFilter<"tweet"> | number
    comments_count?: IntWithAggregatesFilter<"tweet"> | number
    image?: StringNullableWithAggregatesFilter<"tweet"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"tweet"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"tweet"> | Date | string
    user_id?: IntWithAggregatesFilter<"tweet"> | number
    originalTweetId?: IntNullableWithAggregatesFilter<"tweet"> | number | null
  }

  export type tweet_likesWhereInput = {
    AND?: tweet_likesWhereInput | tweet_likesWhereInput[]
    OR?: tweet_likesWhereInput[]
    NOT?: tweet_likesWhereInput | tweet_likesWhereInput[]
    id?: IntFilter<"tweet_likes"> | number
    user_id?: IntFilter<"tweet_likes"> | number
    tweet_id?: IntFilter<"tweet_likes"> | number
    created_at?: DateTimeFilter<"tweet_likes"> | Date | string
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    tweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
  }

  export type tweet_likesOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
    created_at?: SortOrder
    user?: userOrderByWithRelationInput
    tweet?: tweetOrderByWithRelationInput
  }

  export type tweet_likesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tweet_likesWhereInput | tweet_likesWhereInput[]
    OR?: tweet_likesWhereInput[]
    NOT?: tweet_likesWhereInput | tweet_likesWhereInput[]
    user_id?: IntFilter<"tweet_likes"> | number
    tweet_id?: IntFilter<"tweet_likes"> | number
    created_at?: DateTimeFilter<"tweet_likes"> | Date | string
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
    tweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
  }, "id">

  export type tweet_likesOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
    created_at?: SortOrder
    _count?: tweet_likesCountOrderByAggregateInput
    _avg?: tweet_likesAvgOrderByAggregateInput
    _max?: tweet_likesMaxOrderByAggregateInput
    _min?: tweet_likesMinOrderByAggregateInput
    _sum?: tweet_likesSumOrderByAggregateInput
  }

  export type tweet_likesScalarWhereWithAggregatesInput = {
    AND?: tweet_likesScalarWhereWithAggregatesInput | tweet_likesScalarWhereWithAggregatesInput[]
    OR?: tweet_likesScalarWhereWithAggregatesInput[]
    NOT?: tweet_likesScalarWhereWithAggregatesInput | tweet_likesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tweet_likes"> | number
    user_id?: IntWithAggregatesFilter<"tweet_likes"> | number
    tweet_id?: IntWithAggregatesFilter<"tweet_likes"> | number
    created_at?: DateTimeWithAggregatesFilter<"tweet_likes"> | Date | string
  }

  export type tweet_retweetWhereInput = {
    AND?: tweet_retweetWhereInput | tweet_retweetWhereInput[]
    OR?: tweet_retweetWhereInput[]
    NOT?: tweet_retweetWhereInput | tweet_retweetWhereInput[]
    id?: IntFilter<"tweet_retweet"> | number
    tweet_id?: IntFilter<"tweet_retweet"> | number
    user_id?: IntFilter<"tweet_retweet"> | number
    created_at?: DateTimeFilter<"tweet_retweet"> | Date | string
    tweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }

  export type tweet_retweetOrderByWithRelationInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    tweet?: tweetOrderByWithRelationInput
    user?: userOrderByWithRelationInput
  }

  export type tweet_retweetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tweet_retweetWhereInput | tweet_retweetWhereInput[]
    OR?: tweet_retweetWhereInput[]
    NOT?: tweet_retweetWhereInput | tweet_retweetWhereInput[]
    tweet_id?: IntFilter<"tweet_retweet"> | number
    user_id?: IntFilter<"tweet_retweet"> | number
    created_at?: DateTimeFilter<"tweet_retweet"> | Date | string
    tweet?: XOR<TweetNullableRelationFilter, tweetWhereInput> | null
    user?: XOR<UserNullableRelationFilter, userWhereInput> | null
  }, "id">

  export type tweet_retweetOrderByWithAggregationInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
    _count?: tweet_retweetCountOrderByAggregateInput
    _avg?: tweet_retweetAvgOrderByAggregateInput
    _max?: tweet_retweetMaxOrderByAggregateInput
    _min?: tweet_retweetMinOrderByAggregateInput
    _sum?: tweet_retweetSumOrderByAggregateInput
  }

  export type tweet_retweetScalarWhereWithAggregatesInput = {
    AND?: tweet_retweetScalarWhereWithAggregatesInput | tweet_retweetScalarWhereWithAggregatesInput[]
    OR?: tweet_retweetScalarWhereWithAggregatesInput[]
    NOT?: tweet_retweetScalarWhereWithAggregatesInput | tweet_retweetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tweet_retweet"> | number
    tweet_id?: IntWithAggregatesFilter<"tweet_retweet"> | number
    user_id?: IntWithAggregatesFilter<"tweet_retweet"> | number
    created_at?: DateTimeWithAggregatesFilter<"tweet_retweet"> | Date | string
  }

  export type FollowsWhereInput = {
    AND?: FollowsWhereInput | FollowsWhereInput[]
    OR?: FollowsWhereInput[]
    NOT?: FollowsWhereInput | FollowsWhereInput[]
    followerId?: IntFilter<"Follows"> | number
    followingId?: IntFilter<"Follows"> | number
    follower?: XOR<UserRelationFilter, userWhereInput>
    following?: XOR<UserRelationFilter, userWhereInput>
  }

  export type FollowsOrderByWithRelationInput = {
    followerId?: SortOrder
    followingId?: SortOrder
    follower?: userOrderByWithRelationInput
    following?: userOrderByWithRelationInput
  }

  export type FollowsWhereUniqueInput = Prisma.AtLeast<{
    followerId_followingId?: FollowsFollowerIdFollowingIdCompoundUniqueInput
    AND?: FollowsWhereInput | FollowsWhereInput[]
    OR?: FollowsWhereInput[]
    NOT?: FollowsWhereInput | FollowsWhereInput[]
    followerId?: IntFilter<"Follows"> | number
    followingId?: IntFilter<"Follows"> | number
    follower?: XOR<UserRelationFilter, userWhereInput>
    following?: XOR<UserRelationFilter, userWhereInput>
  }, "followerId_followingId">

  export type FollowsOrderByWithAggregationInput = {
    followerId?: SortOrder
    followingId?: SortOrder
    _count?: FollowsCountOrderByAggregateInput
    _avg?: FollowsAvgOrderByAggregateInput
    _max?: FollowsMaxOrderByAggregateInput
    _min?: FollowsMinOrderByAggregateInput
    _sum?: FollowsSumOrderByAggregateInput
  }

  export type FollowsScalarWhereWithAggregatesInput = {
    AND?: FollowsScalarWhereWithAggregatesInput | FollowsScalarWhereWithAggregatesInput[]
    OR?: FollowsScalarWhereWithAggregatesInput[]
    NOT?: FollowsScalarWhereWithAggregatesInput | FollowsScalarWhereWithAggregatesInput[]
    followerId?: IntWithAggregatesFilter<"Follows"> | number
    followingId?: IntWithAggregatesFilter<"Follows"> | number
  }

  export type userCreateInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetCreateNestedManyWithoutUserInput
    followers?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetUncheckedCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesUncheckedCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUpdateManyWithoutUserNestedInput
    followers?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUncheckedUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUncheckedUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweetCreateInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: userCreateNestedOneWithoutTweetsInput
    likes?: tweet_likesCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetCreateNestedManyWithoutTweetInput
    originalTweet?: tweetCreateNestedOneWithoutRepliesInput
    replies?: tweetCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUncheckedCreateInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    originalTweetId?: number | null
    likes?: tweet_likesUncheckedCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetUncheckedCreateNestedManyWithoutTweetInput
    replies?: tweetUncheckedCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutTweetsNestedInput
    likes?: tweet_likesUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUpdateManyWithoutTweetNestedInput
    originalTweet?: tweetUpdateOneWithoutRepliesNestedInput
    replies?: tweetUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: tweet_likesUncheckedUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput
    replies?: tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetCreateManyInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    originalTweetId?: number | null
  }

  export type tweetUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tweet_likesCreateInput = {
    created_at?: Date | string
    user?: userCreateNestedOneWithoutLikedTweetsInput
    tweet?: tweetCreateNestedOneWithoutLikesInput
  }

  export type tweet_likesUncheckedCreateInput = {
    id?: number
    user_id: number
    tweet_id: number
    created_at?: Date | string
  }

  export type tweet_likesUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutLikedTweetsNestedInput
    tweet?: tweetUpdateOneWithoutLikesNestedInput
  }

  export type tweet_likesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_likesCreateManyInput = {
    id?: number
    user_id: number
    tweet_id: number
    created_at?: Date | string
  }

  export type tweet_likesUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_likesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetCreateInput = {
    created_at?: Date | string
    tweet?: tweetCreateNestedOneWithoutRetweetsInput
    user?: userCreateNestedOneWithoutRetweetedTweetsInput
  }

  export type tweet_retweetUncheckedCreateInput = {
    id?: number
    tweet_id: number
    user_id: number
    created_at?: Date | string
  }

  export type tweet_retweetUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: tweetUpdateOneWithoutRetweetsNestedInput
    user?: userUpdateOneWithoutRetweetedTweetsNestedInput
  }

  export type tweet_retweetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetCreateManyInput = {
    id?: number
    tweet_id: number
    user_id: number
    created_at?: Date | string
  }

  export type tweet_retweetUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowsCreateInput = {
    follower: userCreateNestedOneWithoutFollowingInput
    following: userCreateNestedOneWithoutFollowersInput
  }

  export type FollowsUncheckedCreateInput = {
    followerId: number
    followingId: number
  }

  export type FollowsUpdateInput = {
    follower?: userUpdateOneRequiredWithoutFollowingNestedInput
    following?: userUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowsUncheckedUpdateInput = {
    followerId?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsCreateManyInput = {
    followerId: number
    followingId: number
  }

  export type FollowsUpdateManyMutationInput = {

  }

  export type FollowsUncheckedUpdateManyInput = {
    followerId?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TweetListRelationFilter = {
    every?: tweetWhereInput
    some?: tweetWhereInput
    none?: tweetWhereInput
  }

  export type Tweet_likesListRelationFilter = {
    every?: tweet_likesWhereInput
    some?: tweet_likesWhereInput
    none?: tweet_likesWhereInput
  }

  export type Tweet_retweetListRelationFilter = {
    every?: tweet_retweetWhereInput
    some?: tweet_retweetWhereInput
    none?: tweet_retweetWhereInput
  }

  export type FollowsListRelationFilter = {
    every?: FollowsWhereInput
    some?: FollowsWhereInput
    none?: FollowsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type tweetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tweet_likesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tweet_retweetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
    birthday?: SortOrder
    description?: SortOrder
    profile_photo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
    birthday?: SortOrder
    description?: SortOrder
    profile_photo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
    birthday?: SortOrder
    description?: SortOrder
    profile_photo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
    tweet_count?: SortOrder
    following_count?: SortOrder
    followers_count?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: userWhereInput | null
    isNot?: userWhereInput | null
  }

  export type TweetNullableRelationFilter = {
    is?: tweetWhereInput | null
    isNot?: tweetWhereInput | null
  }

  export type tweetCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrder
  }

  export type tweetAvgOrderByAggregateInput = {
    id?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrder
  }

  export type tweetMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrder
  }

  export type tweetMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrder
  }

  export type tweetSumOrderByAggregateInput = {
    id?: SortOrder
    like_count?: SortOrder
    retweet_count?: SortOrder
    comments_count?: SortOrder
    user_id?: SortOrder
    originalTweetId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type tweet_likesCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_likesAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
  }

  export type tweet_likesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_likesMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_likesSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    tweet_id?: SortOrder
  }

  export type tweet_retweetCountOrderByAggregateInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_retweetAvgOrderByAggregateInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
  }

  export type tweet_retweetMaxOrderByAggregateInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_retweetMinOrderByAggregateInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
    created_at?: SortOrder
  }

  export type tweet_retweetSumOrderByAggregateInput = {
    id?: SortOrder
    tweet_id?: SortOrder
    user_id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type FollowsFollowerIdFollowingIdCompoundUniqueInput = {
    followerId: number
    followingId: number
  }

  export type FollowsCountOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsAvgOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsMaxOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsMinOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type FollowsSumOrderByAggregateInput = {
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type tweetCreateNestedManyWithoutUserInput = {
    create?: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput> | tweetCreateWithoutUserInput[] | tweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutUserInput | tweetCreateOrConnectWithoutUserInput[]
    createMany?: tweetCreateManyUserInputEnvelope
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
  }

  export type tweet_likesCreateNestedManyWithoutUserInput = {
    create?: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput> | tweet_likesCreateWithoutUserInput[] | tweet_likesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutUserInput | tweet_likesCreateOrConnectWithoutUserInput[]
    createMany?: tweet_likesCreateManyUserInputEnvelope
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
  }

  export type tweet_retweetCreateNestedManyWithoutUserInput = {
    create?: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput> | tweet_retweetCreateWithoutUserInput[] | tweet_retweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutUserInput | tweet_retweetCreateOrConnectWithoutUserInput[]
    createMany?: tweet_retweetCreateManyUserInputEnvelope
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
  }

  export type FollowsCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput> | FollowsCreateWithoutFollowingInput[] | FollowsUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowingInput | FollowsCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowsCreateManyFollowingInputEnvelope
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
  }

  export type FollowsCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput> | FollowsCreateWithoutFollowerInput[] | FollowsUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowerInput | FollowsCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowsCreateManyFollowerInputEnvelope
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
  }

  export type tweetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput> | tweetCreateWithoutUserInput[] | tweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutUserInput | tweetCreateOrConnectWithoutUserInput[]
    createMany?: tweetCreateManyUserInputEnvelope
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
  }

  export type tweet_likesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput> | tweet_likesCreateWithoutUserInput[] | tweet_likesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutUserInput | tweet_likesCreateOrConnectWithoutUserInput[]
    createMany?: tweet_likesCreateManyUserInputEnvelope
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
  }

  export type tweet_retweetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput> | tweet_retweetCreateWithoutUserInput[] | tweet_retweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutUserInput | tweet_retweetCreateOrConnectWithoutUserInput[]
    createMany?: tweet_retweetCreateManyUserInputEnvelope
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
  }

  export type FollowsUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput> | FollowsCreateWithoutFollowingInput[] | FollowsUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowingInput | FollowsCreateOrConnectWithoutFollowingInput[]
    createMany?: FollowsCreateManyFollowingInputEnvelope
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
  }

  export type FollowsUncheckedCreateNestedManyWithoutFollowerInput = {
    create?: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput> | FollowsCreateWithoutFollowerInput[] | FollowsUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowerInput | FollowsCreateOrConnectWithoutFollowerInput[]
    createMany?: FollowsCreateManyFollowerInputEnvelope
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type tweetUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput> | tweetCreateWithoutUserInput[] | tweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutUserInput | tweetCreateOrConnectWithoutUserInput[]
    upsert?: tweetUpsertWithWhereUniqueWithoutUserInput | tweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweetCreateManyUserInputEnvelope
    set?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    disconnect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    delete?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    update?: tweetUpdateWithWhereUniqueWithoutUserInput | tweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweetUpdateManyWithWhereWithoutUserInput | tweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweetScalarWhereInput | tweetScalarWhereInput[]
  }

  export type tweet_likesUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput> | tweet_likesCreateWithoutUserInput[] | tweet_likesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutUserInput | tweet_likesCreateOrConnectWithoutUserInput[]
    upsert?: tweet_likesUpsertWithWhereUniqueWithoutUserInput | tweet_likesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweet_likesCreateManyUserInputEnvelope
    set?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    disconnect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    delete?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    update?: tweet_likesUpdateWithWhereUniqueWithoutUserInput | tweet_likesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweet_likesUpdateManyWithWhereWithoutUserInput | tweet_likesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
  }

  export type tweet_retweetUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput> | tweet_retweetCreateWithoutUserInput[] | tweet_retweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutUserInput | tweet_retweetCreateOrConnectWithoutUserInput[]
    upsert?: tweet_retweetUpsertWithWhereUniqueWithoutUserInput | tweet_retweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweet_retweetCreateManyUserInputEnvelope
    set?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    disconnect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    delete?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    update?: tweet_retweetUpdateWithWhereUniqueWithoutUserInput | tweet_retweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweet_retweetUpdateManyWithWhereWithoutUserInput | tweet_retweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
  }

  export type FollowsUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput> | FollowsCreateWithoutFollowingInput[] | FollowsUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowingInput | FollowsCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowsUpsertWithWhereUniqueWithoutFollowingInput | FollowsUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowsCreateManyFollowingInputEnvelope
    set?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    disconnect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    delete?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    update?: FollowsUpdateWithWhereUniqueWithoutFollowingInput | FollowsUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowsUpdateManyWithWhereWithoutFollowingInput | FollowsUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
  }

  export type FollowsUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput> | FollowsCreateWithoutFollowerInput[] | FollowsUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowerInput | FollowsCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowsUpsertWithWhereUniqueWithoutFollowerInput | FollowsUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowsCreateManyFollowerInputEnvelope
    set?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    disconnect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    delete?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    update?: FollowsUpdateWithWhereUniqueWithoutFollowerInput | FollowsUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowsUpdateManyWithWhereWithoutFollowerInput | FollowsUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
  }

  export type tweetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput> | tweetCreateWithoutUserInput[] | tweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutUserInput | tweetCreateOrConnectWithoutUserInput[]
    upsert?: tweetUpsertWithWhereUniqueWithoutUserInput | tweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweetCreateManyUserInputEnvelope
    set?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    disconnect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    delete?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    update?: tweetUpdateWithWhereUniqueWithoutUserInput | tweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweetUpdateManyWithWhereWithoutUserInput | tweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweetScalarWhereInput | tweetScalarWhereInput[]
  }

  export type tweet_likesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput> | tweet_likesCreateWithoutUserInput[] | tweet_likesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutUserInput | tweet_likesCreateOrConnectWithoutUserInput[]
    upsert?: tweet_likesUpsertWithWhereUniqueWithoutUserInput | tweet_likesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweet_likesCreateManyUserInputEnvelope
    set?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    disconnect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    delete?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    update?: tweet_likesUpdateWithWhereUniqueWithoutUserInput | tweet_likesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweet_likesUpdateManyWithWhereWithoutUserInput | tweet_likesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
  }

  export type tweet_retweetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput> | tweet_retweetCreateWithoutUserInput[] | tweet_retweetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutUserInput | tweet_retweetCreateOrConnectWithoutUserInput[]
    upsert?: tweet_retweetUpsertWithWhereUniqueWithoutUserInput | tweet_retweetUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: tweet_retweetCreateManyUserInputEnvelope
    set?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    disconnect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    delete?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    update?: tweet_retweetUpdateWithWhereUniqueWithoutUserInput | tweet_retweetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: tweet_retweetUpdateManyWithWhereWithoutUserInput | tweet_retweetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
  }

  export type FollowsUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput> | FollowsCreateWithoutFollowingInput[] | FollowsUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowingInput | FollowsCreateOrConnectWithoutFollowingInput[]
    upsert?: FollowsUpsertWithWhereUniqueWithoutFollowingInput | FollowsUpsertWithWhereUniqueWithoutFollowingInput[]
    createMany?: FollowsCreateManyFollowingInputEnvelope
    set?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    disconnect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    delete?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    update?: FollowsUpdateWithWhereUniqueWithoutFollowingInput | FollowsUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: FollowsUpdateManyWithWhereWithoutFollowingInput | FollowsUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
  }

  export type FollowsUncheckedUpdateManyWithoutFollowerNestedInput = {
    create?: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput> | FollowsCreateWithoutFollowerInput[] | FollowsUncheckedCreateWithoutFollowerInput[]
    connectOrCreate?: FollowsCreateOrConnectWithoutFollowerInput | FollowsCreateOrConnectWithoutFollowerInput[]
    upsert?: FollowsUpsertWithWhereUniqueWithoutFollowerInput | FollowsUpsertWithWhereUniqueWithoutFollowerInput[]
    createMany?: FollowsCreateManyFollowerInputEnvelope
    set?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    disconnect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    delete?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    connect?: FollowsWhereUniqueInput | FollowsWhereUniqueInput[]
    update?: FollowsUpdateWithWhereUniqueWithoutFollowerInput | FollowsUpdateWithWhereUniqueWithoutFollowerInput[]
    updateMany?: FollowsUpdateManyWithWhereWithoutFollowerInput | FollowsUpdateManyWithWhereWithoutFollowerInput[]
    deleteMany?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutTweetsInput = {
    create?: XOR<userCreateWithoutTweetsInput, userUncheckedCreateWithoutTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutTweetsInput
    connect?: userWhereUniqueInput
  }

  export type tweet_likesCreateNestedManyWithoutTweetInput = {
    create?: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput> | tweet_likesCreateWithoutTweetInput[] | tweet_likesUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutTweetInput | tweet_likesCreateOrConnectWithoutTweetInput[]
    createMany?: tweet_likesCreateManyTweetInputEnvelope
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
  }

  export type tweet_retweetCreateNestedManyWithoutTweetInput = {
    create?: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput> | tweet_retweetCreateWithoutTweetInput[] | tweet_retweetUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutTweetInput | tweet_retweetCreateOrConnectWithoutTweetInput[]
    createMany?: tweet_retweetCreateManyTweetInputEnvelope
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
  }

  export type tweetCreateNestedOneWithoutRepliesInput = {
    create?: XOR<tweetCreateWithoutRepliesInput, tweetUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: tweetCreateOrConnectWithoutRepliesInput
    connect?: tweetWhereUniqueInput
  }

  export type tweetCreateNestedManyWithoutOriginalTweetInput = {
    create?: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput> | tweetCreateWithoutOriginalTweetInput[] | tweetUncheckedCreateWithoutOriginalTweetInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutOriginalTweetInput | tweetCreateOrConnectWithoutOriginalTweetInput[]
    createMany?: tweetCreateManyOriginalTweetInputEnvelope
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
  }

  export type tweet_likesUncheckedCreateNestedManyWithoutTweetInput = {
    create?: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput> | tweet_likesCreateWithoutTweetInput[] | tweet_likesUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutTweetInput | tweet_likesCreateOrConnectWithoutTweetInput[]
    createMany?: tweet_likesCreateManyTweetInputEnvelope
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
  }

  export type tweet_retweetUncheckedCreateNestedManyWithoutTweetInput = {
    create?: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput> | tweet_retweetCreateWithoutTweetInput[] | tweet_retweetUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutTweetInput | tweet_retweetCreateOrConnectWithoutTweetInput[]
    createMany?: tweet_retweetCreateManyTweetInputEnvelope
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
  }

  export type tweetUncheckedCreateNestedManyWithoutOriginalTweetInput = {
    create?: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput> | tweetCreateWithoutOriginalTweetInput[] | tweetUncheckedCreateWithoutOriginalTweetInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutOriginalTweetInput | tweetCreateOrConnectWithoutOriginalTweetInput[]
    createMany?: tweetCreateManyOriginalTweetInputEnvelope
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
  }

  export type userUpdateOneWithoutTweetsNestedInput = {
    create?: XOR<userCreateWithoutTweetsInput, userUncheckedCreateWithoutTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutTweetsInput
    upsert?: userUpsertWithoutTweetsInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutTweetsInput, userUpdateWithoutTweetsInput>, userUncheckedUpdateWithoutTweetsInput>
  }

  export type tweet_likesUpdateManyWithoutTweetNestedInput = {
    create?: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput> | tweet_likesCreateWithoutTweetInput[] | tweet_likesUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutTweetInput | tweet_likesCreateOrConnectWithoutTweetInput[]
    upsert?: tweet_likesUpsertWithWhereUniqueWithoutTweetInput | tweet_likesUpsertWithWhereUniqueWithoutTweetInput[]
    createMany?: tweet_likesCreateManyTweetInputEnvelope
    set?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    disconnect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    delete?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    update?: tweet_likesUpdateWithWhereUniqueWithoutTweetInput | tweet_likesUpdateWithWhereUniqueWithoutTweetInput[]
    updateMany?: tweet_likesUpdateManyWithWhereWithoutTweetInput | tweet_likesUpdateManyWithWhereWithoutTweetInput[]
    deleteMany?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
  }

  export type tweet_retweetUpdateManyWithoutTweetNestedInput = {
    create?: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput> | tweet_retweetCreateWithoutTweetInput[] | tweet_retweetUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutTweetInput | tweet_retweetCreateOrConnectWithoutTweetInput[]
    upsert?: tweet_retweetUpsertWithWhereUniqueWithoutTweetInput | tweet_retweetUpsertWithWhereUniqueWithoutTweetInput[]
    createMany?: tweet_retweetCreateManyTweetInputEnvelope
    set?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    disconnect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    delete?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    update?: tweet_retweetUpdateWithWhereUniqueWithoutTweetInput | tweet_retweetUpdateWithWhereUniqueWithoutTweetInput[]
    updateMany?: tweet_retweetUpdateManyWithWhereWithoutTweetInput | tweet_retweetUpdateManyWithWhereWithoutTweetInput[]
    deleteMany?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
  }

  export type tweetUpdateOneWithoutRepliesNestedInput = {
    create?: XOR<tweetCreateWithoutRepliesInput, tweetUncheckedCreateWithoutRepliesInput>
    connectOrCreate?: tweetCreateOrConnectWithoutRepliesInput
    upsert?: tweetUpsertWithoutRepliesInput
    disconnect?: tweetWhereInput | boolean
    delete?: tweetWhereInput | boolean
    connect?: tweetWhereUniqueInput
    update?: XOR<XOR<tweetUpdateToOneWithWhereWithoutRepliesInput, tweetUpdateWithoutRepliesInput>, tweetUncheckedUpdateWithoutRepliesInput>
  }

  export type tweetUpdateManyWithoutOriginalTweetNestedInput = {
    create?: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput> | tweetCreateWithoutOriginalTweetInput[] | tweetUncheckedCreateWithoutOriginalTweetInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutOriginalTweetInput | tweetCreateOrConnectWithoutOriginalTweetInput[]
    upsert?: tweetUpsertWithWhereUniqueWithoutOriginalTweetInput | tweetUpsertWithWhereUniqueWithoutOriginalTweetInput[]
    createMany?: tweetCreateManyOriginalTweetInputEnvelope
    set?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    disconnect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    delete?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    update?: tweetUpdateWithWhereUniqueWithoutOriginalTweetInput | tweetUpdateWithWhereUniqueWithoutOriginalTweetInput[]
    updateMany?: tweetUpdateManyWithWhereWithoutOriginalTweetInput | tweetUpdateManyWithWhereWithoutOriginalTweetInput[]
    deleteMany?: tweetScalarWhereInput | tweetScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type tweet_likesUncheckedUpdateManyWithoutTweetNestedInput = {
    create?: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput> | tweet_likesCreateWithoutTweetInput[] | tweet_likesUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_likesCreateOrConnectWithoutTweetInput | tweet_likesCreateOrConnectWithoutTweetInput[]
    upsert?: tweet_likesUpsertWithWhereUniqueWithoutTweetInput | tweet_likesUpsertWithWhereUniqueWithoutTweetInput[]
    createMany?: tweet_likesCreateManyTweetInputEnvelope
    set?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    disconnect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    delete?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    connect?: tweet_likesWhereUniqueInput | tweet_likesWhereUniqueInput[]
    update?: tweet_likesUpdateWithWhereUniqueWithoutTweetInput | tweet_likesUpdateWithWhereUniqueWithoutTweetInput[]
    updateMany?: tweet_likesUpdateManyWithWhereWithoutTweetInput | tweet_likesUpdateManyWithWhereWithoutTweetInput[]
    deleteMany?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
  }

  export type tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput = {
    create?: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput> | tweet_retweetCreateWithoutTweetInput[] | tweet_retweetUncheckedCreateWithoutTweetInput[]
    connectOrCreate?: tweet_retweetCreateOrConnectWithoutTweetInput | tweet_retweetCreateOrConnectWithoutTweetInput[]
    upsert?: tweet_retweetUpsertWithWhereUniqueWithoutTweetInput | tweet_retweetUpsertWithWhereUniqueWithoutTweetInput[]
    createMany?: tweet_retweetCreateManyTweetInputEnvelope
    set?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    disconnect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    delete?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    connect?: tweet_retweetWhereUniqueInput | tweet_retweetWhereUniqueInput[]
    update?: tweet_retweetUpdateWithWhereUniqueWithoutTweetInput | tweet_retweetUpdateWithWhereUniqueWithoutTweetInput[]
    updateMany?: tweet_retweetUpdateManyWithWhereWithoutTweetInput | tweet_retweetUpdateManyWithWhereWithoutTweetInput[]
    deleteMany?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
  }

  export type tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput = {
    create?: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput> | tweetCreateWithoutOriginalTweetInput[] | tweetUncheckedCreateWithoutOriginalTweetInput[]
    connectOrCreate?: tweetCreateOrConnectWithoutOriginalTweetInput | tweetCreateOrConnectWithoutOriginalTweetInput[]
    upsert?: tweetUpsertWithWhereUniqueWithoutOriginalTweetInput | tweetUpsertWithWhereUniqueWithoutOriginalTweetInput[]
    createMany?: tweetCreateManyOriginalTweetInputEnvelope
    set?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    disconnect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    delete?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    connect?: tweetWhereUniqueInput | tweetWhereUniqueInput[]
    update?: tweetUpdateWithWhereUniqueWithoutOriginalTweetInput | tweetUpdateWithWhereUniqueWithoutOriginalTweetInput[]
    updateMany?: tweetUpdateManyWithWhereWithoutOriginalTweetInput | tweetUpdateManyWithWhereWithoutOriginalTweetInput[]
    deleteMany?: tweetScalarWhereInput | tweetScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutLikedTweetsInput = {
    create?: XOR<userCreateWithoutLikedTweetsInput, userUncheckedCreateWithoutLikedTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutLikedTweetsInput
    connect?: userWhereUniqueInput
  }

  export type tweetCreateNestedOneWithoutLikesInput = {
    create?: XOR<tweetCreateWithoutLikesInput, tweetUncheckedCreateWithoutLikesInput>
    connectOrCreate?: tweetCreateOrConnectWithoutLikesInput
    connect?: tweetWhereUniqueInput
  }

  export type userUpdateOneWithoutLikedTweetsNestedInput = {
    create?: XOR<userCreateWithoutLikedTweetsInput, userUncheckedCreateWithoutLikedTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutLikedTweetsInput
    upsert?: userUpsertWithoutLikedTweetsInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutLikedTweetsInput, userUpdateWithoutLikedTweetsInput>, userUncheckedUpdateWithoutLikedTweetsInput>
  }

  export type tweetUpdateOneWithoutLikesNestedInput = {
    create?: XOR<tweetCreateWithoutLikesInput, tweetUncheckedCreateWithoutLikesInput>
    connectOrCreate?: tweetCreateOrConnectWithoutLikesInput
    upsert?: tweetUpsertWithoutLikesInput
    disconnect?: tweetWhereInput | boolean
    delete?: tweetWhereInput | boolean
    connect?: tweetWhereUniqueInput
    update?: XOR<XOR<tweetUpdateToOneWithWhereWithoutLikesInput, tweetUpdateWithoutLikesInput>, tweetUncheckedUpdateWithoutLikesInput>
  }

  export type tweetCreateNestedOneWithoutRetweetsInput = {
    create?: XOR<tweetCreateWithoutRetweetsInput, tweetUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: tweetCreateOrConnectWithoutRetweetsInput
    connect?: tweetWhereUniqueInput
  }

  export type userCreateNestedOneWithoutRetweetedTweetsInput = {
    create?: XOR<userCreateWithoutRetweetedTweetsInput, userUncheckedCreateWithoutRetweetedTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutRetweetedTweetsInput
    connect?: userWhereUniqueInput
  }

  export type tweetUpdateOneWithoutRetweetsNestedInput = {
    create?: XOR<tweetCreateWithoutRetweetsInput, tweetUncheckedCreateWithoutRetweetsInput>
    connectOrCreate?: tweetCreateOrConnectWithoutRetweetsInput
    upsert?: tweetUpsertWithoutRetweetsInput
    disconnect?: tweetWhereInput | boolean
    delete?: tweetWhereInput | boolean
    connect?: tweetWhereUniqueInput
    update?: XOR<XOR<tweetUpdateToOneWithWhereWithoutRetweetsInput, tweetUpdateWithoutRetweetsInput>, tweetUncheckedUpdateWithoutRetweetsInput>
  }

  export type userUpdateOneWithoutRetweetedTweetsNestedInput = {
    create?: XOR<userCreateWithoutRetweetedTweetsInput, userUncheckedCreateWithoutRetweetedTweetsInput>
    connectOrCreate?: userCreateOrConnectWithoutRetweetedTweetsInput
    upsert?: userUpsertWithoutRetweetedTweetsInput
    disconnect?: userWhereInput | boolean
    delete?: userWhereInput | boolean
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutRetweetedTweetsInput, userUpdateWithoutRetweetedTweetsInput>, userUncheckedUpdateWithoutRetweetedTweetsInput>
  }

  export type userCreateNestedOneWithoutFollowingInput = {
    create?: XOR<userCreateWithoutFollowingInput, userUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: userCreateOrConnectWithoutFollowingInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutFollowersInput = {
    create?: XOR<userCreateWithoutFollowersInput, userUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: userCreateOrConnectWithoutFollowersInput
    connect?: userWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutFollowingNestedInput = {
    create?: XOR<userCreateWithoutFollowingInput, userUncheckedCreateWithoutFollowingInput>
    connectOrCreate?: userCreateOrConnectWithoutFollowingInput
    upsert?: userUpsertWithoutFollowingInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFollowingInput, userUpdateWithoutFollowingInput>, userUncheckedUpdateWithoutFollowingInput>
  }

  export type userUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<userCreateWithoutFollowersInput, userUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: userCreateOrConnectWithoutFollowersInput
    upsert?: userUpsertWithoutFollowersInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutFollowersInput, userUpdateWithoutFollowersInput>, userUncheckedUpdateWithoutFollowersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type tweetCreateWithoutUserInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    likes?: tweet_likesCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetCreateNestedManyWithoutTweetInput
    originalTweet?: tweetCreateNestedOneWithoutRepliesInput
    replies?: tweetCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    originalTweetId?: number | null
    likes?: tweet_likesUncheckedCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetUncheckedCreateNestedManyWithoutTweetInput
    replies?: tweetUncheckedCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetCreateOrConnectWithoutUserInput = {
    where: tweetWhereUniqueInput
    create: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput>
  }

  export type tweetCreateManyUserInputEnvelope = {
    data: tweetCreateManyUserInput | tweetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type tweet_likesCreateWithoutUserInput = {
    created_at?: Date | string
    tweet?: tweetCreateNestedOneWithoutLikesInput
  }

  export type tweet_likesUncheckedCreateWithoutUserInput = {
    id?: number
    tweet_id: number
    created_at?: Date | string
  }

  export type tweet_likesCreateOrConnectWithoutUserInput = {
    where: tweet_likesWhereUniqueInput
    create: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput>
  }

  export type tweet_likesCreateManyUserInputEnvelope = {
    data: tweet_likesCreateManyUserInput | tweet_likesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type tweet_retweetCreateWithoutUserInput = {
    created_at?: Date | string
    tweet?: tweetCreateNestedOneWithoutRetweetsInput
  }

  export type tweet_retweetUncheckedCreateWithoutUserInput = {
    id?: number
    tweet_id: number
    created_at?: Date | string
  }

  export type tweet_retweetCreateOrConnectWithoutUserInput = {
    where: tweet_retweetWhereUniqueInput
    create: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput>
  }

  export type tweet_retweetCreateManyUserInputEnvelope = {
    data: tweet_retweetCreateManyUserInput | tweet_retweetCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowsCreateWithoutFollowingInput = {
    follower: userCreateNestedOneWithoutFollowingInput
  }

  export type FollowsUncheckedCreateWithoutFollowingInput = {
    followerId: number
  }

  export type FollowsCreateOrConnectWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    create: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput>
  }

  export type FollowsCreateManyFollowingInputEnvelope = {
    data: FollowsCreateManyFollowingInput | FollowsCreateManyFollowingInput[]
    skipDuplicates?: boolean
  }

  export type FollowsCreateWithoutFollowerInput = {
    following: userCreateNestedOneWithoutFollowersInput
  }

  export type FollowsUncheckedCreateWithoutFollowerInput = {
    followingId: number
  }

  export type FollowsCreateOrConnectWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    create: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput>
  }

  export type FollowsCreateManyFollowerInputEnvelope = {
    data: FollowsCreateManyFollowerInput | FollowsCreateManyFollowerInput[]
    skipDuplicates?: boolean
  }

  export type tweetUpsertWithWhereUniqueWithoutUserInput = {
    where: tweetWhereUniqueInput
    update: XOR<tweetUpdateWithoutUserInput, tweetUncheckedUpdateWithoutUserInput>
    create: XOR<tweetCreateWithoutUserInput, tweetUncheckedCreateWithoutUserInput>
  }

  export type tweetUpdateWithWhereUniqueWithoutUserInput = {
    where: tweetWhereUniqueInput
    data: XOR<tweetUpdateWithoutUserInput, tweetUncheckedUpdateWithoutUserInput>
  }

  export type tweetUpdateManyWithWhereWithoutUserInput = {
    where: tweetScalarWhereInput
    data: XOR<tweetUpdateManyMutationInput, tweetUncheckedUpdateManyWithoutUserInput>
  }

  export type tweetScalarWhereInput = {
    AND?: tweetScalarWhereInput | tweetScalarWhereInput[]
    OR?: tweetScalarWhereInput[]
    NOT?: tweetScalarWhereInput | tweetScalarWhereInput[]
    id?: IntFilter<"tweet"> | number
    content?: StringFilter<"tweet"> | string
    like_count?: IntFilter<"tweet"> | number
    retweet_count?: IntFilter<"tweet"> | number
    comments_count?: IntFilter<"tweet"> | number
    image?: StringNullableFilter<"tweet"> | string | null
    created_at?: DateTimeFilter<"tweet"> | Date | string
    updated_at?: DateTimeFilter<"tweet"> | Date | string
    user_id?: IntFilter<"tweet"> | number
    originalTweetId?: IntNullableFilter<"tweet"> | number | null
  }

  export type tweet_likesUpsertWithWhereUniqueWithoutUserInput = {
    where: tweet_likesWhereUniqueInput
    update: XOR<tweet_likesUpdateWithoutUserInput, tweet_likesUncheckedUpdateWithoutUserInput>
    create: XOR<tweet_likesCreateWithoutUserInput, tweet_likesUncheckedCreateWithoutUserInput>
  }

  export type tweet_likesUpdateWithWhereUniqueWithoutUserInput = {
    where: tweet_likesWhereUniqueInput
    data: XOR<tweet_likesUpdateWithoutUserInput, tweet_likesUncheckedUpdateWithoutUserInput>
  }

  export type tweet_likesUpdateManyWithWhereWithoutUserInput = {
    where: tweet_likesScalarWhereInput
    data: XOR<tweet_likesUpdateManyMutationInput, tweet_likesUncheckedUpdateManyWithoutUserInput>
  }

  export type tweet_likesScalarWhereInput = {
    AND?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
    OR?: tweet_likesScalarWhereInput[]
    NOT?: tweet_likesScalarWhereInput | tweet_likesScalarWhereInput[]
    id?: IntFilter<"tweet_likes"> | number
    user_id?: IntFilter<"tweet_likes"> | number
    tweet_id?: IntFilter<"tweet_likes"> | number
    created_at?: DateTimeFilter<"tweet_likes"> | Date | string
  }

  export type tweet_retweetUpsertWithWhereUniqueWithoutUserInput = {
    where: tweet_retweetWhereUniqueInput
    update: XOR<tweet_retweetUpdateWithoutUserInput, tweet_retweetUncheckedUpdateWithoutUserInput>
    create: XOR<tweet_retweetCreateWithoutUserInput, tweet_retweetUncheckedCreateWithoutUserInput>
  }

  export type tweet_retweetUpdateWithWhereUniqueWithoutUserInput = {
    where: tweet_retweetWhereUniqueInput
    data: XOR<tweet_retweetUpdateWithoutUserInput, tweet_retweetUncheckedUpdateWithoutUserInput>
  }

  export type tweet_retweetUpdateManyWithWhereWithoutUserInput = {
    where: tweet_retweetScalarWhereInput
    data: XOR<tweet_retweetUpdateManyMutationInput, tweet_retweetUncheckedUpdateManyWithoutUserInput>
  }

  export type tweet_retweetScalarWhereInput = {
    AND?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
    OR?: tweet_retweetScalarWhereInput[]
    NOT?: tweet_retweetScalarWhereInput | tweet_retweetScalarWhereInput[]
    id?: IntFilter<"tweet_retweet"> | number
    tweet_id?: IntFilter<"tweet_retweet"> | number
    user_id?: IntFilter<"tweet_retweet"> | number
    created_at?: DateTimeFilter<"tweet_retweet"> | Date | string
  }

  export type FollowsUpsertWithWhereUniqueWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    update: XOR<FollowsUpdateWithoutFollowingInput, FollowsUncheckedUpdateWithoutFollowingInput>
    create: XOR<FollowsCreateWithoutFollowingInput, FollowsUncheckedCreateWithoutFollowingInput>
  }

  export type FollowsUpdateWithWhereUniqueWithoutFollowingInput = {
    where: FollowsWhereUniqueInput
    data: XOR<FollowsUpdateWithoutFollowingInput, FollowsUncheckedUpdateWithoutFollowingInput>
  }

  export type FollowsUpdateManyWithWhereWithoutFollowingInput = {
    where: FollowsScalarWhereInput
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyWithoutFollowingInput>
  }

  export type FollowsScalarWhereInput = {
    AND?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
    OR?: FollowsScalarWhereInput[]
    NOT?: FollowsScalarWhereInput | FollowsScalarWhereInput[]
    followerId?: IntFilter<"Follows"> | number
    followingId?: IntFilter<"Follows"> | number
  }

  export type FollowsUpsertWithWhereUniqueWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    update: XOR<FollowsUpdateWithoutFollowerInput, FollowsUncheckedUpdateWithoutFollowerInput>
    create: XOR<FollowsCreateWithoutFollowerInput, FollowsUncheckedCreateWithoutFollowerInput>
  }

  export type FollowsUpdateWithWhereUniqueWithoutFollowerInput = {
    where: FollowsWhereUniqueInput
    data: XOR<FollowsUpdateWithoutFollowerInput, FollowsUncheckedUpdateWithoutFollowerInput>
  }

  export type FollowsUpdateManyWithWhereWithoutFollowerInput = {
    where: FollowsScalarWhereInput
    data: XOR<FollowsUpdateManyMutationInput, FollowsUncheckedUpdateManyWithoutFollowerInput>
  }

  export type userCreateWithoutTweetsInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    likedTweets?: tweet_likesCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetCreateNestedManyWithoutUserInput
    followers?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
  }

  export type userUncheckedCreateWithoutTweetsInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    likedTweets?: tweet_likesUncheckedCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type userCreateOrConnectWithoutTweetsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutTweetsInput, userUncheckedCreateWithoutTweetsInput>
  }

  export type tweet_likesCreateWithoutTweetInput = {
    created_at?: Date | string
    user?: userCreateNestedOneWithoutLikedTweetsInput
  }

  export type tweet_likesUncheckedCreateWithoutTweetInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type tweet_likesCreateOrConnectWithoutTweetInput = {
    where: tweet_likesWhereUniqueInput
    create: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput>
  }

  export type tweet_likesCreateManyTweetInputEnvelope = {
    data: tweet_likesCreateManyTweetInput | tweet_likesCreateManyTweetInput[]
    skipDuplicates?: boolean
  }

  export type tweet_retweetCreateWithoutTweetInput = {
    created_at?: Date | string
    user?: userCreateNestedOneWithoutRetweetedTweetsInput
  }

  export type tweet_retweetUncheckedCreateWithoutTweetInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type tweet_retweetCreateOrConnectWithoutTweetInput = {
    where: tweet_retweetWhereUniqueInput
    create: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput>
  }

  export type tweet_retweetCreateManyTweetInputEnvelope = {
    data: tweet_retweetCreateManyTweetInput | tweet_retweetCreateManyTweetInput[]
    skipDuplicates?: boolean
  }

  export type tweetCreateWithoutRepliesInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: userCreateNestedOneWithoutTweetsInput
    likes?: tweet_likesCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetCreateNestedManyWithoutTweetInput
    originalTweet?: tweetCreateNestedOneWithoutRepliesInput
  }

  export type tweetUncheckedCreateWithoutRepliesInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    originalTweetId?: number | null
    likes?: tweet_likesUncheckedCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetUncheckedCreateNestedManyWithoutTweetInput
  }

  export type tweetCreateOrConnectWithoutRepliesInput = {
    where: tweetWhereUniqueInput
    create: XOR<tweetCreateWithoutRepliesInput, tweetUncheckedCreateWithoutRepliesInput>
  }

  export type tweetCreateWithoutOriginalTweetInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: userCreateNestedOneWithoutTweetsInput
    likes?: tweet_likesCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetCreateNestedManyWithoutTweetInput
    replies?: tweetCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUncheckedCreateWithoutOriginalTweetInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    likes?: tweet_likesUncheckedCreateNestedManyWithoutTweetInput
    retweets?: tweet_retweetUncheckedCreateNestedManyWithoutTweetInput
    replies?: tweetUncheckedCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetCreateOrConnectWithoutOriginalTweetInput = {
    where: tweetWhereUniqueInput
    create: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput>
  }

  export type tweetCreateManyOriginalTweetInputEnvelope = {
    data: tweetCreateManyOriginalTweetInput | tweetCreateManyOriginalTweetInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutTweetsInput = {
    update: XOR<userUpdateWithoutTweetsInput, userUncheckedUpdateWithoutTweetsInput>
    create: XOR<userCreateWithoutTweetsInput, userUncheckedCreateWithoutTweetsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutTweetsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutTweetsInput, userUncheckedUpdateWithoutTweetsInput>
  }

  export type userUpdateWithoutTweetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likedTweets?: tweet_likesUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUpdateManyWithoutUserNestedInput
    followers?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
  }

  export type userUncheckedUpdateWithoutTweetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likedTweets?: tweet_likesUncheckedUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type tweet_likesUpsertWithWhereUniqueWithoutTweetInput = {
    where: tweet_likesWhereUniqueInput
    update: XOR<tweet_likesUpdateWithoutTweetInput, tweet_likesUncheckedUpdateWithoutTweetInput>
    create: XOR<tweet_likesCreateWithoutTweetInput, tweet_likesUncheckedCreateWithoutTweetInput>
  }

  export type tweet_likesUpdateWithWhereUniqueWithoutTweetInput = {
    where: tweet_likesWhereUniqueInput
    data: XOR<tweet_likesUpdateWithoutTweetInput, tweet_likesUncheckedUpdateWithoutTweetInput>
  }

  export type tweet_likesUpdateManyWithWhereWithoutTweetInput = {
    where: tweet_likesScalarWhereInput
    data: XOR<tweet_likesUpdateManyMutationInput, tweet_likesUncheckedUpdateManyWithoutTweetInput>
  }

  export type tweet_retweetUpsertWithWhereUniqueWithoutTweetInput = {
    where: tweet_retweetWhereUniqueInput
    update: XOR<tweet_retweetUpdateWithoutTweetInput, tweet_retweetUncheckedUpdateWithoutTweetInput>
    create: XOR<tweet_retweetCreateWithoutTweetInput, tweet_retweetUncheckedCreateWithoutTweetInput>
  }

  export type tweet_retweetUpdateWithWhereUniqueWithoutTweetInput = {
    where: tweet_retweetWhereUniqueInput
    data: XOR<tweet_retweetUpdateWithoutTweetInput, tweet_retweetUncheckedUpdateWithoutTweetInput>
  }

  export type tweet_retweetUpdateManyWithWhereWithoutTweetInput = {
    where: tweet_retweetScalarWhereInput
    data: XOR<tweet_retweetUpdateManyMutationInput, tweet_retweetUncheckedUpdateManyWithoutTweetInput>
  }

  export type tweetUpsertWithoutRepliesInput = {
    update: XOR<tweetUpdateWithoutRepliesInput, tweetUncheckedUpdateWithoutRepliesInput>
    create: XOR<tweetCreateWithoutRepliesInput, tweetUncheckedCreateWithoutRepliesInput>
    where?: tweetWhereInput
  }

  export type tweetUpdateToOneWithWhereWithoutRepliesInput = {
    where?: tweetWhereInput
    data: XOR<tweetUpdateWithoutRepliesInput, tweetUncheckedUpdateWithoutRepliesInput>
  }

  export type tweetUpdateWithoutRepliesInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutTweetsNestedInput
    likes?: tweet_likesUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUpdateManyWithoutTweetNestedInput
    originalTweet?: tweetUpdateOneWithoutRepliesNestedInput
  }

  export type tweetUncheckedUpdateWithoutRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: tweet_likesUncheckedUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput
  }

  export type tweetUpsertWithWhereUniqueWithoutOriginalTweetInput = {
    where: tweetWhereUniqueInput
    update: XOR<tweetUpdateWithoutOriginalTweetInput, tweetUncheckedUpdateWithoutOriginalTweetInput>
    create: XOR<tweetCreateWithoutOriginalTweetInput, tweetUncheckedCreateWithoutOriginalTweetInput>
  }

  export type tweetUpdateWithWhereUniqueWithoutOriginalTweetInput = {
    where: tweetWhereUniqueInput
    data: XOR<tweetUpdateWithoutOriginalTweetInput, tweetUncheckedUpdateWithoutOriginalTweetInput>
  }

  export type tweetUpdateManyWithWhereWithoutOriginalTweetInput = {
    where: tweetScalarWhereInput
    data: XOR<tweetUpdateManyMutationInput, tweetUncheckedUpdateManyWithoutOriginalTweetInput>
  }

  export type userCreateWithoutLikedTweetsInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetCreateNestedManyWithoutUserInput
    followers?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
  }

  export type userUncheckedCreateWithoutLikedTweetsInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetUncheckedCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type userCreateOrConnectWithoutLikedTweetsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutLikedTweetsInput, userUncheckedCreateWithoutLikedTweetsInput>
  }

  export type tweetCreateWithoutLikesInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: userCreateNestedOneWithoutTweetsInput
    retweets?: tweet_retweetCreateNestedManyWithoutTweetInput
    originalTweet?: tweetCreateNestedOneWithoutRepliesInput
    replies?: tweetCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUncheckedCreateWithoutLikesInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    originalTweetId?: number | null
    retweets?: tweet_retweetUncheckedCreateNestedManyWithoutTweetInput
    replies?: tweetUncheckedCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetCreateOrConnectWithoutLikesInput = {
    where: tweetWhereUniqueInput
    create: XOR<tweetCreateWithoutLikesInput, tweetUncheckedCreateWithoutLikesInput>
  }

  export type userUpsertWithoutLikedTweetsInput = {
    update: XOR<userUpdateWithoutLikedTweetsInput, userUncheckedUpdateWithoutLikedTweetsInput>
    create: XOR<userCreateWithoutLikedTweetsInput, userUncheckedCreateWithoutLikedTweetsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutLikedTweetsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutLikedTweetsInput, userUncheckedUpdateWithoutLikedTweetsInput>
  }

  export type userUpdateWithoutLikedTweetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUpdateManyWithoutUserNestedInput
    followers?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
  }

  export type userUncheckedUpdateWithoutLikedTweetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUncheckedUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type tweetUpsertWithoutLikesInput = {
    update: XOR<tweetUpdateWithoutLikesInput, tweetUncheckedUpdateWithoutLikesInput>
    create: XOR<tweetCreateWithoutLikesInput, tweetUncheckedCreateWithoutLikesInput>
    where?: tweetWhereInput
  }

  export type tweetUpdateToOneWithWhereWithoutLikesInput = {
    where?: tweetWhereInput
    data: XOR<tweetUpdateWithoutLikesInput, tweetUncheckedUpdateWithoutLikesInput>
  }

  export type tweetUpdateWithoutLikesInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutTweetsNestedInput
    retweets?: tweet_retweetUpdateManyWithoutTweetNestedInput
    originalTweet?: tweetUpdateOneWithoutRepliesNestedInput
    replies?: tweetUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
    retweets?: tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput
    replies?: tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetCreateWithoutRetweetsInput = {
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user?: userCreateNestedOneWithoutTweetsInput
    likes?: tweet_likesCreateNestedManyWithoutTweetInput
    originalTweet?: tweetCreateNestedOneWithoutRepliesInput
    replies?: tweetCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetUncheckedCreateWithoutRetweetsInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
    originalTweetId?: number | null
    likes?: tweet_likesUncheckedCreateNestedManyWithoutTweetInput
    replies?: tweetUncheckedCreateNestedManyWithoutOriginalTweetInput
  }

  export type tweetCreateOrConnectWithoutRetweetsInput = {
    where: tweetWhereUniqueInput
    create: XOR<tweetCreateWithoutRetweetsInput, tweetUncheckedCreateWithoutRetweetsInput>
  }

  export type userCreateWithoutRetweetedTweetsInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesCreateNestedManyWithoutUserInput
    followers?: FollowsCreateNestedManyWithoutFollowingInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
  }

  export type userUncheckedCreateWithoutRetweetedTweetsInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetUncheckedCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type userCreateOrConnectWithoutRetweetedTweetsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRetweetedTweetsInput, userUncheckedCreateWithoutRetweetedTweetsInput>
  }

  export type tweetUpsertWithoutRetweetsInput = {
    update: XOR<tweetUpdateWithoutRetweetsInput, tweetUncheckedUpdateWithoutRetweetsInput>
    create: XOR<tweetCreateWithoutRetweetsInput, tweetUncheckedCreateWithoutRetweetsInput>
    where?: tweetWhereInput
  }

  export type tweetUpdateToOneWithWhereWithoutRetweetsInput = {
    where?: tweetWhereInput
    data: XOR<tweetUpdateWithoutRetweetsInput, tweetUncheckedUpdateWithoutRetweetsInput>
  }

  export type tweetUpdateWithoutRetweetsInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutTweetsNestedInput
    likes?: tweet_likesUpdateManyWithoutTweetNestedInput
    originalTweet?: tweetUpdateOneWithoutRepliesNestedInput
    replies?: tweetUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateWithoutRetweetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: tweet_likesUncheckedUpdateManyWithoutTweetNestedInput
    replies?: tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput
  }

  export type userUpsertWithoutRetweetedTweetsInput = {
    update: XOR<userUpdateWithoutRetweetedTweetsInput, userUncheckedUpdateWithoutRetweetedTweetsInput>
    create: XOR<userCreateWithoutRetweetedTweetsInput, userUncheckedCreateWithoutRetweetedTweetsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutRetweetedTweetsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutRetweetedTweetsInput, userUncheckedUpdateWithoutRetweetedTweetsInput>
  }

  export type userUpdateWithoutRetweetedTweetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUpdateManyWithoutUserNestedInput
    followers?: FollowsUpdateManyWithoutFollowingNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
  }

  export type userUncheckedUpdateWithoutRetweetedTweetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUncheckedUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type userCreateWithoutFollowingInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetCreateNestedManyWithoutUserInput
    followers?: FollowsCreateNestedManyWithoutFollowingInput
  }

  export type userUncheckedCreateWithoutFollowingInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetUncheckedCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesUncheckedCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowsUncheckedCreateNestedManyWithoutFollowingInput
  }

  export type userCreateOrConnectWithoutFollowingInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFollowingInput, userUncheckedCreateWithoutFollowingInput>
  }

  export type userCreateWithoutFollowersInput = {
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetCreateNestedManyWithoutUserInput
    following?: FollowsCreateNestedManyWithoutFollowerInput
  }

  export type userUncheckedCreateWithoutFollowersInput = {
    id?: number
    name: string
    username: string
    email: string
    password: string
    tweet_count?: number
    following_count?: number
    followers_count?: number
    birthday?: Date | string | null
    description?: string | null
    profile_photo?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    tweets?: tweetUncheckedCreateNestedManyWithoutUserInput
    likedTweets?: tweet_likesUncheckedCreateNestedManyWithoutUserInput
    retweetedTweets?: tweet_retweetUncheckedCreateNestedManyWithoutUserInput
    following?: FollowsUncheckedCreateNestedManyWithoutFollowerInput
  }

  export type userCreateOrConnectWithoutFollowersInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutFollowersInput, userUncheckedCreateWithoutFollowersInput>
  }

  export type userUpsertWithoutFollowingInput = {
    update: XOR<userUpdateWithoutFollowingInput, userUncheckedUpdateWithoutFollowingInput>
    create: XOR<userCreateWithoutFollowingInput, userUncheckedCreateWithoutFollowingInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFollowingInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFollowingInput, userUncheckedUpdateWithoutFollowingInput>
  }

  export type userUpdateWithoutFollowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUpdateManyWithoutUserNestedInput
    followers?: FollowsUpdateManyWithoutFollowingNestedInput
  }

  export type userUncheckedUpdateWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUncheckedUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUncheckedUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowsUncheckedUpdateManyWithoutFollowingNestedInput
  }

  export type userUpsertWithoutFollowersInput = {
    update: XOR<userUpdateWithoutFollowersInput, userUncheckedUpdateWithoutFollowersInput>
    create: XOR<userCreateWithoutFollowersInput, userUncheckedCreateWithoutFollowersInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutFollowersInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutFollowersInput, userUncheckedUpdateWithoutFollowersInput>
  }

  export type userUpdateWithoutFollowersInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUpdateManyWithoutUserNestedInput
    following?: FollowsUpdateManyWithoutFollowerNestedInput
  }

  export type userUncheckedUpdateWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    tweet_count?: IntFieldUpdateOperationsInput | number
    following_count?: IntFieldUpdateOperationsInput | number
    followers_count?: IntFieldUpdateOperationsInput | number
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    profile_photo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweets?: tweetUncheckedUpdateManyWithoutUserNestedInput
    likedTweets?: tweet_likesUncheckedUpdateManyWithoutUserNestedInput
    retweetedTweets?: tweet_retweetUncheckedUpdateManyWithoutUserNestedInput
    following?: FollowsUncheckedUpdateManyWithoutFollowerNestedInput
  }

  export type tweetCreateManyUserInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    originalTweetId?: number | null
  }

  export type tweet_likesCreateManyUserInput = {
    id?: number
    tweet_id: number
    created_at?: Date | string
  }

  export type tweet_retweetCreateManyUserInput = {
    id?: number
    tweet_id: number
    created_at?: Date | string
  }

  export type FollowsCreateManyFollowingInput = {
    followerId: number
  }

  export type FollowsCreateManyFollowerInput = {
    followingId: number
  }

  export type tweetUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: tweet_likesUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUpdateManyWithoutTweetNestedInput
    originalTweet?: tweetUpdateOneWithoutRepliesNestedInput
    replies?: tweetUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
    likes?: tweet_likesUncheckedUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput
    replies?: tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    originalTweetId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type tweet_likesUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: tweetUpdateOneWithoutLikesNestedInput
  }

  export type tweet_likesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_likesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: tweetUpdateOneWithoutRetweetsNestedInput
  }

  export type tweet_retweetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    tweet_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowsUpdateWithoutFollowingInput = {
    follower?: userUpdateOneRequiredWithoutFollowingNestedInput
  }

  export type FollowsUncheckedUpdateWithoutFollowingInput = {
    followerId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsUncheckedUpdateManyWithoutFollowingInput = {
    followerId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsUpdateWithoutFollowerInput = {
    following?: userUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type FollowsUncheckedUpdateWithoutFollowerInput = {
    followingId?: IntFieldUpdateOperationsInput | number
  }

  export type FollowsUncheckedUpdateManyWithoutFollowerInput = {
    followingId?: IntFieldUpdateOperationsInput | number
  }

  export type tweet_likesCreateManyTweetInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type tweet_retweetCreateManyTweetInput = {
    id?: number
    user_id: number
    created_at?: Date | string
  }

  export type tweetCreateManyOriginalTweetInput = {
    id?: number
    content: string
    like_count?: number
    retweet_count?: number
    comments_count?: number
    image?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    user_id: number
  }

  export type tweet_likesUpdateWithoutTweetInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutLikedTweetsNestedInput
  }

  export type tweet_likesUncheckedUpdateWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_likesUncheckedUpdateManyWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetUpdateWithoutTweetInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutRetweetedTweetsNestedInput
  }

  export type tweet_retweetUncheckedUpdateWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweet_retweetUncheckedUpdateManyWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tweetUpdateWithoutOriginalTweetInput = {
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneWithoutTweetsNestedInput
    likes?: tweet_likesUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUpdateManyWithoutTweetNestedInput
    replies?: tweetUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateWithoutOriginalTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    likes?: tweet_likesUncheckedUpdateManyWithoutTweetNestedInput
    retweets?: tweet_retweetUncheckedUpdateManyWithoutTweetNestedInput
    replies?: tweetUncheckedUpdateManyWithoutOriginalTweetNestedInput
  }

  export type tweetUncheckedUpdateManyWithoutOriginalTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    like_count?: IntFieldUpdateOperationsInput | number
    retweet_count?: IntFieldUpdateOperationsInput | number
    comments_count?: IntFieldUpdateOperationsInput | number
    image?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}